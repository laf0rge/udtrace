// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R5A
// The generation of user and time information were disabled by the -D flag.

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef Osmocom__Types_HH
#define Osmocom__Types_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "General_Types.hh"

#if TTCN3_VERSION != 60500
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef Osmocom__Types_HH
#endif

namespace Osmocom__Types {

/* Forward declarations of classes */

class Arfcn;
class Arfcn_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER IntegerRecord;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER_template IntegerRecord_template;

} /* end of namespace */

#ifndef Osmocom__Types_HH
#define Osmocom__Types_HH

namespace Osmocom__Types {

/* Type definitions */

typedef INTEGER uint8__t;
typedef INTEGER_template uint8__t_template;
typedef INTEGER uint16__t;
typedef INTEGER_template uint16__t_template;
typedef INTEGER uint24__t;
typedef INTEGER_template uint24__t_template;
typedef INTEGER uint32__t;
typedef INTEGER_template uint32__t_template;
typedef INTEGER int8__t;
typedef INTEGER_template int8__t_template;
typedef INTEGER int16__t;
typedef INTEGER_template int16__t_template;
typedef INTEGER uint1__t;
typedef INTEGER_template uint1__t_template;
typedef INTEGER uint2__t;
typedef INTEGER_template uint2__t_template;
typedef INTEGER uint3__t;
typedef INTEGER_template uint3__t_template;
typedef INTEGER uint4__t;
typedef INTEGER_template uint4__t_template;
typedef INTEGER uint5__t;
typedef INTEGER_template uint5__t_template;
typedef INTEGER uint6__t;
typedef INTEGER_template uint6__t_template;
typedef INTEGER uint7__t;
typedef INTEGER_template uint7__t_template;
typedef INTEGER uint9__t;
typedef INTEGER_template uint9__t_template;
typedef INTEGER uint10__t;
typedef INTEGER_template uint10__t_template;
typedef INTEGER uint11__t;
typedef INTEGER_template uint11__t_template;
typedef INTEGER uint12__t;
typedef INTEGER_template uint12__t_template;
typedef INTEGER uint13__t;
typedef INTEGER_template uint13__t_template;
typedef INTEGER uint14__t;
typedef INTEGER_template uint14__t_template;
typedef INTEGER uint15__t;
typedef INTEGER_template uint15__t_template;

/* Class definitions */

class Arfcn : public Base_Type {
  BOOLEAN field_pcs;
  INTEGER field_arfcn;
public:
  Arfcn();
  Arfcn(const BOOLEAN& par_pcs,
    const INTEGER& par_arfcn);
  Arfcn(const Arfcn& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  Arfcn& operator=(const Arfcn& other_value);
  boolean operator==(const Arfcn& other_value) const;
  inline boolean operator!=(const Arfcn& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline BOOLEAN& pcs()
    {return field_pcs;}
  inline const BOOLEAN& pcs() const
    {return field_pcs;}
  inline INTEGER& arfcn()
    {return field_arfcn;}
  inline const INTEGER& arfcn() const
    {return field_arfcn;}
  inline int size_of() const
    {return 2;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class Arfcn_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Arfcn_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Arfcn& other_value);
void copy_template(const Arfcn_template& other_value);

public:
Arfcn_template();
Arfcn_template(template_sel other_value);
Arfcn_template(const Arfcn& other_value);
Arfcn_template(const OPTIONAL<Arfcn>& other_value);
Arfcn_template(const Arfcn_template& other_value);
~Arfcn_template();
Arfcn_template& operator=(template_sel other_value);
Arfcn_template& operator=(const Arfcn& other_value);
Arfcn_template& operator=(const OPTIONAL<Arfcn>& other_value);
Arfcn_template& operator=(const Arfcn_template& other_value);
boolean match(const Arfcn& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Arfcn valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Arfcn_template& list_item(unsigned int list_index) const;
BOOLEAN_template& pcs();
const BOOLEAN_template& pcs() const;
INTEGER_template& arfcn();
const INTEGER_template& arfcn() const;
int size_of() const;
void log() const;
void log_match(const Arfcn& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Function prototypes */

extern void uint8__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint8__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint16__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint16__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint24__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint24__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint32__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint32__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void int8__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER int8__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void int16__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER int16__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint1__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint1__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint2__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint2__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint3__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint3__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint4__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint4__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint5__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint5__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint6__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint6__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint7__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint7__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint9__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint9__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint10__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint10__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint11__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint11__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint12__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint12__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint13__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint13__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint14__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint14__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void uint15__t_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER uint15__t_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Arfcn_pcs_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Arfcn_pcs_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Arfcn_arfcn_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Arfcn_arfcn_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void Arfcn_encoder(const Arfcn& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER Arfcn_decoder(OCTETSTRING& input_stream, Arfcn& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER f__rnd__int(const INTEGER& max);
extern HEXSTRING f__rnd__hexstring(const INTEGER& len, const INTEGER& max);
extern OCTETSTRING f__rnd__octstring(const INTEGER& len);
extern HEXSTRING f__rnd__imsi(const HEXSTRING& prefix);
extern OCTETSTRING f__rnd__msisdn(const OCTETSTRING& prefix, const INTEGER& len);
extern void f__sleep(const FLOAT& seconds);
extern BITSTRING bool2bit(const BOOLEAN& inp);
extern BITSTRING_template bool2bit__tmpl(const BOOLEAN_template& inp);
extern void IntegerRecord_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER IntegerRecord_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void IntegerRecord_encoder(const IntegerRecord& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER IntegerRecord_decoder(OCTETSTRING& input_stream, IntegerRecord& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern BOOLEAN int2bool(const INTEGER& int_);
extern BOOLEAN f__array__contains(const IntegerRecord& arr, const INTEGER& key);
extern void f__timer__safe__restart(TIMER& T);
extern INTEGER f__div__round__up(const INTEGER& dividend, const INTEGER& divisor);

/* Global variable declarations */

extern const TTCN_RAWdescriptor_t uint8__t_raw_;
extern const XERdescriptor_t uint8__t_xer_;
extern const TTCN_OERdescriptor_t uint8__t_oer_;
extern const TTCN_Typedescriptor_t uint8__t_descr_;
extern UNIVERSAL_CHARSTRING uint8__t_default_coding;
extern const TTCN_RAWdescriptor_t uint16__t_raw_;
extern const XERdescriptor_t uint16__t_xer_;
extern const TTCN_OERdescriptor_t uint16__t_oer_;
extern const TTCN_Typedescriptor_t uint16__t_descr_;
extern UNIVERSAL_CHARSTRING uint16__t_default_coding;
extern const TTCN_RAWdescriptor_t uint24__t_raw_;
extern const XERdescriptor_t uint24__t_xer_;
extern const TTCN_Typedescriptor_t uint24__t_descr_;
extern UNIVERSAL_CHARSTRING uint24__t_default_coding;
extern const TTCN_RAWdescriptor_t uint32__t_raw_;
extern const XERdescriptor_t uint32__t_xer_;
extern const TTCN_OERdescriptor_t uint32__t_oer_;
extern const TTCN_Typedescriptor_t uint32__t_descr_;
extern UNIVERSAL_CHARSTRING uint32__t_default_coding;
extern const TTCN_RAWdescriptor_t int8__t_raw_;
extern const XERdescriptor_t int8__t_xer_;
extern const TTCN_OERdescriptor_t int8__t_oer_;
extern const TTCN_Typedescriptor_t int8__t_descr_;
extern UNIVERSAL_CHARSTRING int8__t_default_coding;
extern const TTCN_RAWdescriptor_t int16__t_raw_;
extern const XERdescriptor_t int16__t_xer_;
extern const TTCN_OERdescriptor_t int16__t_oer_;
extern const TTCN_Typedescriptor_t int16__t_descr_;
extern UNIVERSAL_CHARSTRING int16__t_default_coding;
extern const TTCN_RAWdescriptor_t uint1__t_raw_;
extern const XERdescriptor_t uint1__t_xer_;
extern const TTCN_OERdescriptor_t uint1__t_oer_;
extern const TTCN_Typedescriptor_t uint1__t_descr_;
extern UNIVERSAL_CHARSTRING uint1__t_default_coding;
extern const TTCN_RAWdescriptor_t uint2__t_raw_;
extern const XERdescriptor_t uint2__t_xer_;
extern const TTCN_OERdescriptor_t uint2__t_oer_;
extern const TTCN_Typedescriptor_t uint2__t_descr_;
extern UNIVERSAL_CHARSTRING uint2__t_default_coding;
extern const TTCN_RAWdescriptor_t uint3__t_raw_;
extern const XERdescriptor_t uint3__t_xer_;
extern const TTCN_OERdescriptor_t uint3__t_oer_;
extern const TTCN_Typedescriptor_t uint3__t_descr_;
extern UNIVERSAL_CHARSTRING uint3__t_default_coding;
extern const TTCN_RAWdescriptor_t uint4__t_raw_;
extern const XERdescriptor_t uint4__t_xer_;
extern const TTCN_OERdescriptor_t uint4__t_oer_;
extern const TTCN_Typedescriptor_t uint4__t_descr_;
extern UNIVERSAL_CHARSTRING uint4__t_default_coding;
extern const TTCN_RAWdescriptor_t uint5__t_raw_;
extern const XERdescriptor_t uint5__t_xer_;
extern const TTCN_OERdescriptor_t uint5__t_oer_;
extern const TTCN_Typedescriptor_t uint5__t_descr_;
extern UNIVERSAL_CHARSTRING uint5__t_default_coding;
extern const TTCN_RAWdescriptor_t uint6__t_raw_;
extern const XERdescriptor_t uint6__t_xer_;
extern const TTCN_OERdescriptor_t uint6__t_oer_;
extern const TTCN_Typedescriptor_t uint6__t_descr_;
extern UNIVERSAL_CHARSTRING uint6__t_default_coding;
extern const TTCN_RAWdescriptor_t uint7__t_raw_;
extern const XERdescriptor_t uint7__t_xer_;
extern const TTCN_Typedescriptor_t uint7__t_descr_;
extern UNIVERSAL_CHARSTRING uint7__t_default_coding;
extern const TTCN_RAWdescriptor_t uint9__t_raw_;
extern const XERdescriptor_t uint9__t_xer_;
extern const TTCN_OERdescriptor_t uint9__t_oer_;
extern const TTCN_Typedescriptor_t uint9__t_descr_;
extern UNIVERSAL_CHARSTRING uint9__t_default_coding;
extern const TTCN_RAWdescriptor_t uint10__t_raw_;
extern const XERdescriptor_t uint10__t_xer_;
extern const TTCN_OERdescriptor_t uint10__t_oer_;
extern const TTCN_Typedescriptor_t uint10__t_descr_;
extern UNIVERSAL_CHARSTRING uint10__t_default_coding;
extern const TTCN_RAWdescriptor_t uint11__t_raw_;
extern const XERdescriptor_t uint11__t_xer_;
extern const TTCN_Typedescriptor_t uint11__t_descr_;
extern UNIVERSAL_CHARSTRING uint11__t_default_coding;
extern const TTCN_RAWdescriptor_t uint12__t_raw_;
extern const XERdescriptor_t uint12__t_xer_;
extern const TTCN_OERdescriptor_t uint12__t_oer_;
extern const TTCN_Typedescriptor_t uint12__t_descr_;
extern UNIVERSAL_CHARSTRING uint12__t_default_coding;
extern const TTCN_RAWdescriptor_t uint13__t_raw_;
extern const XERdescriptor_t uint13__t_xer_;
extern const TTCN_Typedescriptor_t uint13__t_descr_;
extern UNIVERSAL_CHARSTRING uint13__t_default_coding;
extern const TTCN_RAWdescriptor_t uint14__t_raw_;
extern const XERdescriptor_t uint14__t_xer_;
extern const TTCN_Typedescriptor_t uint14__t_descr_;
extern UNIVERSAL_CHARSTRING uint14__t_default_coding;
extern const TTCN_RAWdescriptor_t uint15__t_raw_;
extern const XERdescriptor_t uint15__t_xer_;
extern const TTCN_Typedescriptor_t uint15__t_descr_;
extern UNIVERSAL_CHARSTRING uint15__t_default_coding;
extern const INTEGER& c__UINT16__MAX;
extern const INTEGER& c__UINT32__MAX;
extern const TTCN_RAWdescriptor_t Arfcn_pcs_raw_;
extern const XERdescriptor_t Arfcn_pcs_xer_;
extern const TTCN_OERdescriptor_t Arfcn_pcs_oer_;
extern const TTCN_Typedescriptor_t Arfcn_pcs_descr_;
extern UNIVERSAL_CHARSTRING Arfcn_pcs_default_coding;
extern const TTCN_RAWdescriptor_t Arfcn_arfcn_raw_;
extern const XERdescriptor_t Arfcn_arfcn_xer_;
extern const TTCN_OERdescriptor_t Arfcn_arfcn_oer_;
extern const TTCN_Typedescriptor_t Arfcn_arfcn_descr_;
extern UNIVERSAL_CHARSTRING Arfcn_arfcn_default_coding;
extern const TTCN_RAWdescriptor_t Arfcn_raw_;
extern const TTCN_Typedescriptor_t Arfcn_descr_;
extern UNIVERSAL_CHARSTRING Arfcn_default_coding;
extern const INTEGER& f__rnd__hexstring_max_defval;
extern const INTEGER& f__rnd__msisdn_len_defval;
extern const TTCN_RAWdescriptor_t IntegerRecord_raw_;
extern const TTCN_Typedescriptor_t IntegerRecord_descr_;
extern const TTCN_RAWdescriptor_t IntegerRecord_0_raw_;
extern const XERdescriptor_t IntegerRecord_0_xer_;
extern const TTCN_Typedescriptor_t IntegerRecord_0_descr_;
extern UNIVERSAL_CHARSTRING IntegerRecord_0_default_coding;
extern UNIVERSAL_CHARSTRING IntegerRecord_default_coding;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
