// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/6 R5A
// The generation of user and time information were disabled by the -D flag.

// Copyright (c) 2000-2018 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef PCUIF__Types_HH
#define PCUIF__Types_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>
#include "Osmocom_Types.hh"

#if TTCN3_VERSION != 60500
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.\
 Run make clean and rebuild the project if the version of the compiler changed recently.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef PCUIF__Types_HH
#endif

namespace PCUIF__Types {

/* Forward declarations of classes */

class PCUIF__MsgType;
class PCUIF__MsgType_template;
class PCUIF__Sapi;
class PCUIF__Sapi_template;
class PCUIF__Flags;
class PCUIF__Flags_template;
class PCUIF__TextType;
class PCUIF__TextType_template;
class PCUIF__txt__ind;
class PCUIF__txt__ind_template;
class PCUIF__data;
class PCUIF__data_template;
class PCUIF__data__cnf__dt;
class PCUIF__data__cnf__dt_template;
class PCUIF__rts__req;
class PCUIF__rts__req_template;
class PCUIF__BurstType;
class PCUIF__BurstType_template;
class PCUIF__rach__ind;
class PCUIF__rach__ind_template;
class PCUIF__InfoTrx;
class PCUIF__InfoTrx_template;
class PCUIF__InfoTrxs;
class PCUIF__InfoTrxs_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER PCUIF__info__ind_nse__timer;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER_template PCUIF__info__ind_nse__timer_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER PCUIF__info__ind_cell__timer;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER_template PCUIF__info__ind_cell__timer_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER PCUIF__info__ind_nsvci;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER_template PCUIF__info__ind_nsvci_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER PCUIF__info__ind_local__pprt;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER_template PCUIF__info__ind_local__pprt_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER PCUIF__info__ind_remote__port;
typedef PreGenRecordOf::PREGEN__RECORD__OF__INTEGER_template PCUIF__info__ind_remote__port_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__OCTETSTRING PCUIF__info__ind_remote__ip;
typedef PreGenRecordOf::PREGEN__RECORD__OF__OCTETSTRING_template PCUIF__info__ind_remote__ip_template;
class PCUIF__info__ind;
class PCUIF__info__ind_template;
class PCUIF__act__req;
class PCUIF__act__req_template;
class PCUIF__time__ind;
class PCUIF__time__ind_template;
class PCUIF__pag__req;
class PCUIF__pag__req_template;
class PCUIF__susp__req;
class PCUIF__susp__req_template;
class PCUIF__MsgUnion;
class PCUIF__MsgUnion_template;
class PCUIF__Message;
class PCUIF__Message_template;

} /* end of namespace */

#ifndef PCUIF__Types_HH
#define PCUIF__Types_HH

namespace PCUIF__Types {

/* Type definitions */

typedef CHARSTRING PCUIF__Text;
typedef CHARSTRING_template PCUIF__Text_template;
typedef OCTETSTRING OCT162;
typedef OCTETSTRING_template OCT162_template;

/* Class definitions */

class PCUIF__MsgType : public Base_Type { // enum
friend class PCUIF__MsgType_template;
public:
enum enum_type { PCU__IF__MSG__DATA__REQ = 0, PCU__IF__MSG__DATA__CNF = 1, PCU__IF__MSG__DATA__IND = 2, PCU__IF__MSG__SUSP__REQ = 3, PCU__IF__MSG__RTS__REQ = 16, PCU__IF__MSG__DATA__CNF__DT = 17, PCU__IF__MSG__RACH__IND = 34, PCU__IF__MSG__INFO__IND = 50, PCU__IF__MSG__ACT__REQ = 64, PCU__IF__MSG__TIME__IND = 82, PCU__IF__MSG__PAG__REQ = 96, PCU__IF__MSG__TXT__IND = 112, UNKNOWN_VALUE = 4, UNBOUND_VALUE = 5 };
private:
enum_type enum_value;

public:
PCUIF__MsgType();
PCUIF__MsgType(int other_value);
PCUIF__MsgType(enum_type other_value);
PCUIF__MsgType(const PCUIF__MsgType& other_value);

PCUIF__MsgType& operator=(int other_value);
PCUIF__MsgType& operator=(enum_type other_value);
PCUIF__MsgType& operator=(const PCUIF__MsgType& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const PCUIF__MsgType& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const PCUIF__MsgType& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const PCUIF__MsgType& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const PCUIF__MsgType& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const PCUIF__MsgType& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const PCUIF__MsgType& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const PCUIF__MsgType& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__MsgType_template : public Base_Template {
union {
PCUIF__MsgType::enum_type single_value;
struct {
unsigned int n_values;
PCUIF__MsgType_template *list_value;
} value_list;
};

void copy_template(const PCUIF__MsgType_template& other_value);

public:
PCUIF__MsgType_template();
PCUIF__MsgType_template(template_sel other_value);
PCUIF__MsgType_template(int other_value);
PCUIF__MsgType_template(PCUIF__MsgType::enum_type other_value);
PCUIF__MsgType_template(const PCUIF__MsgType& other_value);
PCUIF__MsgType_template(const OPTIONAL<PCUIF__MsgType>& other_value);
PCUIF__MsgType_template(const PCUIF__MsgType_template& other_value);
~PCUIF__MsgType_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__MsgType_template& operator=(template_sel other_value);
PCUIF__MsgType_template& operator=(int other_value);
PCUIF__MsgType_template& operator=(PCUIF__MsgType::enum_type other_value);
PCUIF__MsgType_template& operator=(const PCUIF__MsgType& other_value);
PCUIF__MsgType_template& operator=(const OPTIONAL<PCUIF__MsgType>& other_value);
PCUIF__MsgType_template& operator=(const PCUIF__MsgType_template& other_value);

boolean match(PCUIF__MsgType::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const PCUIF__MsgType& other_value, boolean legacy = FALSE) const;
PCUIF__MsgType::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__MsgType_template& list_item(unsigned int list_index);
void log() const;
void log_match(const PCUIF__MsgType& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class PCUIF__Sapi : public Base_Type { // enum
friend class PCUIF__Sapi_template;
public:
enum enum_type { PCU__IF__SAPI__UNKNOWN = 0, PCU__IF__SAPI__RACH = 1, PCU__IF__SAPI__AGCH = 2, PCU__IF__SAPI__PCH = 3, PCU__IF__SAPI__BCCH = 4, PCU__IF__SAPI__PDTCH = 5, PCU__IF__SAPI__PRACH = 6, PCU__IF__SAPI__PTCCH = 7, PCU__IF__SAPI__AGCH__DT = 8, UNKNOWN_VALUE = 9, UNBOUND_VALUE = 10 };
private:
enum_type enum_value;

public:
PCUIF__Sapi();
PCUIF__Sapi(int other_value);
PCUIF__Sapi(enum_type other_value);
PCUIF__Sapi(const PCUIF__Sapi& other_value);

PCUIF__Sapi& operator=(int other_value);
PCUIF__Sapi& operator=(enum_type other_value);
PCUIF__Sapi& operator=(const PCUIF__Sapi& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const PCUIF__Sapi& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const PCUIF__Sapi& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const PCUIF__Sapi& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const PCUIF__Sapi& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const PCUIF__Sapi& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const PCUIF__Sapi& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const PCUIF__Sapi& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__Sapi_template : public Base_Template {
union {
PCUIF__Sapi::enum_type single_value;
struct {
unsigned int n_values;
PCUIF__Sapi_template *list_value;
} value_list;
};

void copy_template(const PCUIF__Sapi_template& other_value);

public:
PCUIF__Sapi_template();
PCUIF__Sapi_template(template_sel other_value);
PCUIF__Sapi_template(int other_value);
PCUIF__Sapi_template(PCUIF__Sapi::enum_type other_value);
PCUIF__Sapi_template(const PCUIF__Sapi& other_value);
PCUIF__Sapi_template(const OPTIONAL<PCUIF__Sapi>& other_value);
PCUIF__Sapi_template(const PCUIF__Sapi_template& other_value);
~PCUIF__Sapi_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__Sapi_template& operator=(template_sel other_value);
PCUIF__Sapi_template& operator=(int other_value);
PCUIF__Sapi_template& operator=(PCUIF__Sapi::enum_type other_value);
PCUIF__Sapi_template& operator=(const PCUIF__Sapi& other_value);
PCUIF__Sapi_template& operator=(const OPTIONAL<PCUIF__Sapi>& other_value);
PCUIF__Sapi_template& operator=(const PCUIF__Sapi_template& other_value);

boolean match(PCUIF__Sapi::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const PCUIF__Sapi& other_value, boolean legacy = FALSE) const;
PCUIF__Sapi::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__Sapi_template& list_item(unsigned int list_index);
void log() const;
void log_match(const PCUIF__Sapi& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class PCUIF__Flags : public Base_Type {
  BOOLEAN field_bts__active;
  BOOLEAN field_sysmo__direct__dsp;
  BITSTRING field_spare;
  BOOLEAN field_cs1;
  BOOLEAN field_cs2;
  BOOLEAN field_cs3;
  BOOLEAN field_cs4;
  BOOLEAN field_mcs1;
  BOOLEAN field_mcs2;
  BOOLEAN field_mcs3;
  BOOLEAN field_mcs4;
  BOOLEAN field_mcs5;
  BOOLEAN field_mcs6;
  BOOLEAN field_mcs7;
  BOOLEAN field_mcs8;
  BOOLEAN field_mcs9;
  BITSTRING field_spare2;
public:
  PCUIF__Flags();
  PCUIF__Flags(const BOOLEAN& par_bts__active,
    const BOOLEAN& par_sysmo__direct__dsp,
    const BITSTRING& par_spare,
    const BOOLEAN& par_cs1,
    const BOOLEAN& par_cs2,
    const BOOLEAN& par_cs3,
    const BOOLEAN& par_cs4,
    const BOOLEAN& par_mcs1,
    const BOOLEAN& par_mcs2,
    const BOOLEAN& par_mcs3,
    const BOOLEAN& par_mcs4,
    const BOOLEAN& par_mcs5,
    const BOOLEAN& par_mcs6,
    const BOOLEAN& par_mcs7,
    const BOOLEAN& par_mcs8,
    const BOOLEAN& par_mcs9,
    const BITSTRING& par_spare2);
  PCUIF__Flags(const PCUIF__Flags& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__Flags& operator=(const PCUIF__Flags& other_value);
  boolean operator==(const PCUIF__Flags& other_value) const;
  inline boolean operator!=(const PCUIF__Flags& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline BOOLEAN& bts__active()
    {return field_bts__active;}
  inline const BOOLEAN& bts__active() const
    {return field_bts__active;}
  inline BOOLEAN& sysmo__direct__dsp()
    {return field_sysmo__direct__dsp;}
  inline const BOOLEAN& sysmo__direct__dsp() const
    {return field_sysmo__direct__dsp;}
  inline BITSTRING& spare()
    {return field_spare;}
  inline const BITSTRING& spare() const
    {return field_spare;}
  inline BOOLEAN& cs1()
    {return field_cs1;}
  inline const BOOLEAN& cs1() const
    {return field_cs1;}
  inline BOOLEAN& cs2()
    {return field_cs2;}
  inline const BOOLEAN& cs2() const
    {return field_cs2;}
  inline BOOLEAN& cs3()
    {return field_cs3;}
  inline const BOOLEAN& cs3() const
    {return field_cs3;}
  inline BOOLEAN& cs4()
    {return field_cs4;}
  inline const BOOLEAN& cs4() const
    {return field_cs4;}
  inline BOOLEAN& mcs1()
    {return field_mcs1;}
  inline const BOOLEAN& mcs1() const
    {return field_mcs1;}
  inline BOOLEAN& mcs2()
    {return field_mcs2;}
  inline const BOOLEAN& mcs2() const
    {return field_mcs2;}
  inline BOOLEAN& mcs3()
    {return field_mcs3;}
  inline const BOOLEAN& mcs3() const
    {return field_mcs3;}
  inline BOOLEAN& mcs4()
    {return field_mcs4;}
  inline const BOOLEAN& mcs4() const
    {return field_mcs4;}
  inline BOOLEAN& mcs5()
    {return field_mcs5;}
  inline const BOOLEAN& mcs5() const
    {return field_mcs5;}
  inline BOOLEAN& mcs6()
    {return field_mcs6;}
  inline const BOOLEAN& mcs6() const
    {return field_mcs6;}
  inline BOOLEAN& mcs7()
    {return field_mcs7;}
  inline const BOOLEAN& mcs7() const
    {return field_mcs7;}
  inline BOOLEAN& mcs8()
    {return field_mcs8;}
  inline const BOOLEAN& mcs8() const
    {return field_mcs8;}
  inline BOOLEAN& mcs9()
    {return field_mcs9;}
  inline const BOOLEAN& mcs9() const
    {return field_mcs9;}
  inline BITSTRING& spare2()
    {return field_spare2;}
  inline const BITSTRING& spare2() const
    {return field_spare2;}
  inline int size_of() const
    {return 17;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__Flags_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__Flags_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__Flags& other_value);
void copy_template(const PCUIF__Flags_template& other_value);

public:
PCUIF__Flags_template();
PCUIF__Flags_template(template_sel other_value);
PCUIF__Flags_template(const PCUIF__Flags& other_value);
PCUIF__Flags_template(const OPTIONAL<PCUIF__Flags>& other_value);
PCUIF__Flags_template(const PCUIF__Flags_template& other_value);
~PCUIF__Flags_template();
PCUIF__Flags_template& operator=(template_sel other_value);
PCUIF__Flags_template& operator=(const PCUIF__Flags& other_value);
PCUIF__Flags_template& operator=(const OPTIONAL<PCUIF__Flags>& other_value);
PCUIF__Flags_template& operator=(const PCUIF__Flags_template& other_value);
boolean match(const PCUIF__Flags& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__Flags valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__Flags_template& list_item(unsigned int list_index) const;
BOOLEAN_template& bts__active();
const BOOLEAN_template& bts__active() const;
BOOLEAN_template& sysmo__direct__dsp();
const BOOLEAN_template& sysmo__direct__dsp() const;
BITSTRING_template& spare();
const BITSTRING_template& spare() const;
BOOLEAN_template& cs1();
const BOOLEAN_template& cs1() const;
BOOLEAN_template& cs2();
const BOOLEAN_template& cs2() const;
BOOLEAN_template& cs3();
const BOOLEAN_template& cs3() const;
BOOLEAN_template& cs4();
const BOOLEAN_template& cs4() const;
BOOLEAN_template& mcs1();
const BOOLEAN_template& mcs1() const;
BOOLEAN_template& mcs2();
const BOOLEAN_template& mcs2() const;
BOOLEAN_template& mcs3();
const BOOLEAN_template& mcs3() const;
BOOLEAN_template& mcs4();
const BOOLEAN_template& mcs4() const;
BOOLEAN_template& mcs5();
const BOOLEAN_template& mcs5() const;
BOOLEAN_template& mcs6();
const BOOLEAN_template& mcs6() const;
BOOLEAN_template& mcs7();
const BOOLEAN_template& mcs7() const;
BOOLEAN_template& mcs8();
const BOOLEAN_template& mcs8() const;
BOOLEAN_template& mcs9();
const BOOLEAN_template& mcs9() const;
BITSTRING_template& spare2();
const BITSTRING_template& spare2() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__Flags& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__TextType : public Base_Type { // enum
friend class PCUIF__TextType_template;
public:
enum enum_type { PCU__VERSION = 0, PCU__OML__ALERT = 1, UNKNOWN_VALUE = 2, UNBOUND_VALUE = 3 };
private:
enum_type enum_value;

public:
PCUIF__TextType();
PCUIF__TextType(int other_value);
PCUIF__TextType(enum_type other_value);
PCUIF__TextType(const PCUIF__TextType& other_value);

PCUIF__TextType& operator=(int other_value);
PCUIF__TextType& operator=(enum_type other_value);
PCUIF__TextType& operator=(const PCUIF__TextType& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const PCUIF__TextType& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const PCUIF__TextType& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const PCUIF__TextType& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const PCUIF__TextType& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const PCUIF__TextType& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const PCUIF__TextType& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const PCUIF__TextType& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__TextType_template : public Base_Template {
union {
PCUIF__TextType::enum_type single_value;
struct {
unsigned int n_values;
PCUIF__TextType_template *list_value;
} value_list;
};

void copy_template(const PCUIF__TextType_template& other_value);

public:
PCUIF__TextType_template();
PCUIF__TextType_template(template_sel other_value);
PCUIF__TextType_template(int other_value);
PCUIF__TextType_template(PCUIF__TextType::enum_type other_value);
PCUIF__TextType_template(const PCUIF__TextType& other_value);
PCUIF__TextType_template(const OPTIONAL<PCUIF__TextType>& other_value);
PCUIF__TextType_template(const PCUIF__TextType_template& other_value);
~PCUIF__TextType_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__TextType_template& operator=(template_sel other_value);
PCUIF__TextType_template& operator=(int other_value);
PCUIF__TextType_template& operator=(PCUIF__TextType::enum_type other_value);
PCUIF__TextType_template& operator=(const PCUIF__TextType& other_value);
PCUIF__TextType_template& operator=(const OPTIONAL<PCUIF__TextType>& other_value);
PCUIF__TextType_template& operator=(const PCUIF__TextType_template& other_value);

boolean match(PCUIF__TextType::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const PCUIF__TextType& other_value, boolean legacy = FALSE) const;
PCUIF__TextType::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__TextType_template& list_item(unsigned int list_index);
void log() const;
void log_match(const PCUIF__TextType& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class PCUIF__txt__ind : public Base_Type {
  PCUIF__TextType field_txt__type;
  CHARSTRING field_text;
public:
  PCUIF__txt__ind();
  PCUIF__txt__ind(const PCUIF__TextType& par_txt__type,
    const CHARSTRING& par_text);
  PCUIF__txt__ind(const PCUIF__txt__ind& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__txt__ind& operator=(const PCUIF__txt__ind& other_value);
  boolean operator==(const PCUIF__txt__ind& other_value) const;
  inline boolean operator!=(const PCUIF__txt__ind& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline PCUIF__TextType& txt__type()
    {return field_txt__type;}
  inline const PCUIF__TextType& txt__type() const
    {return field_txt__type;}
  inline CHARSTRING& text()
    {return field_text;}
  inline const CHARSTRING& text() const
    {return field_text;}
  inline int size_of() const
    {return 2;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__txt__ind_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__txt__ind_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__txt__ind& other_value);
void copy_template(const PCUIF__txt__ind_template& other_value);

public:
PCUIF__txt__ind_template();
PCUIF__txt__ind_template(template_sel other_value);
PCUIF__txt__ind_template(const PCUIF__txt__ind& other_value);
PCUIF__txt__ind_template(const OPTIONAL<PCUIF__txt__ind>& other_value);
PCUIF__txt__ind_template(const PCUIF__txt__ind_template& other_value);
~PCUIF__txt__ind_template();
PCUIF__txt__ind_template& operator=(template_sel other_value);
PCUIF__txt__ind_template& operator=(const PCUIF__txt__ind& other_value);
PCUIF__txt__ind_template& operator=(const OPTIONAL<PCUIF__txt__ind>& other_value);
PCUIF__txt__ind_template& operator=(const PCUIF__txt__ind_template& other_value);
boolean match(const PCUIF__txt__ind& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__txt__ind valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__txt__ind_template& list_item(unsigned int list_index) const;
PCUIF__TextType_template& txt__type();
const PCUIF__TextType_template& txt__type() const;
CHARSTRING_template& text();
const CHARSTRING_template& text() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__txt__ind& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__data : public Base_Type {
  PCUIF__Sapi field_sapi;
  INTEGER field_len;
  OCTETSTRING field_data;
  INTEGER field_fn;
  INTEGER field_arfcn;
  INTEGER field_trx__nr;
  INTEGER field_ts__nr;
  INTEGER field_block__nr;
  INTEGER field_rssi;
  INTEGER field_ber10k;
  INTEGER field_ta__offs__qbits;
  INTEGER field_lqual__cb;
public:
  PCUIF__data();
  PCUIF__data(const PCUIF__Sapi& par_sapi,
    const INTEGER& par_len,
    const OCTETSTRING& par_data,
    const INTEGER& par_fn,
    const INTEGER& par_arfcn,
    const INTEGER& par_trx__nr,
    const INTEGER& par_ts__nr,
    const INTEGER& par_block__nr,
    const INTEGER& par_rssi,
    const INTEGER& par_ber10k,
    const INTEGER& par_ta__offs__qbits,
    const INTEGER& par_lqual__cb);
  PCUIF__data(const PCUIF__data& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__data& operator=(const PCUIF__data& other_value);
  boolean operator==(const PCUIF__data& other_value) const;
  inline boolean operator!=(const PCUIF__data& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline PCUIF__Sapi& sapi()
    {return field_sapi;}
  inline const PCUIF__Sapi& sapi() const
    {return field_sapi;}
  inline INTEGER& len()
    {return field_len;}
  inline const INTEGER& len() const
    {return field_len;}
  inline OCTETSTRING& data()
    {return field_data;}
  inline const OCTETSTRING& data() const
    {return field_data;}
  inline INTEGER& fn()
    {return field_fn;}
  inline const INTEGER& fn() const
    {return field_fn;}
  inline INTEGER& arfcn()
    {return field_arfcn;}
  inline const INTEGER& arfcn() const
    {return field_arfcn;}
  inline INTEGER& trx__nr()
    {return field_trx__nr;}
  inline const INTEGER& trx__nr() const
    {return field_trx__nr;}
  inline INTEGER& ts__nr()
    {return field_ts__nr;}
  inline const INTEGER& ts__nr() const
    {return field_ts__nr;}
  inline INTEGER& block__nr()
    {return field_block__nr;}
  inline const INTEGER& block__nr() const
    {return field_block__nr;}
  inline INTEGER& rssi()
    {return field_rssi;}
  inline const INTEGER& rssi() const
    {return field_rssi;}
  inline INTEGER& ber10k()
    {return field_ber10k;}
  inline const INTEGER& ber10k() const
    {return field_ber10k;}
  inline INTEGER& ta__offs__qbits()
    {return field_ta__offs__qbits;}
  inline const INTEGER& ta__offs__qbits() const
    {return field_ta__offs__qbits;}
  inline INTEGER& lqual__cb()
    {return field_lqual__cb;}
  inline const INTEGER& lqual__cb() const
    {return field_lqual__cb;}
  inline int size_of() const
    {return 12;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__data_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__data_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__data& other_value);
void copy_template(const PCUIF__data_template& other_value);

public:
PCUIF__data_template();
PCUIF__data_template(template_sel other_value);
PCUIF__data_template(const PCUIF__data& other_value);
PCUIF__data_template(const OPTIONAL<PCUIF__data>& other_value);
PCUIF__data_template(const PCUIF__data_template& other_value);
~PCUIF__data_template();
PCUIF__data_template& operator=(template_sel other_value);
PCUIF__data_template& operator=(const PCUIF__data& other_value);
PCUIF__data_template& operator=(const OPTIONAL<PCUIF__data>& other_value);
PCUIF__data_template& operator=(const PCUIF__data_template& other_value);
boolean match(const PCUIF__data& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__data valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__data_template& list_item(unsigned int list_index) const;
PCUIF__Sapi_template& sapi();
const PCUIF__Sapi_template& sapi() const;
INTEGER_template& len();
const INTEGER_template& len() const;
OCTETSTRING_template& data();
const OCTETSTRING_template& data() const;
INTEGER_template& fn();
const INTEGER_template& fn() const;
INTEGER_template& arfcn();
const INTEGER_template& arfcn() const;
INTEGER_template& trx__nr();
const INTEGER_template& trx__nr() const;
INTEGER_template& ts__nr();
const INTEGER_template& ts__nr() const;
INTEGER_template& block__nr();
const INTEGER_template& block__nr() const;
INTEGER_template& rssi();
const INTEGER_template& rssi() const;
INTEGER_template& ber10k();
const INTEGER_template& ber10k() const;
INTEGER_template& ta__offs__qbits();
const INTEGER_template& ta__offs__qbits() const;
INTEGER_template& lqual__cb();
const INTEGER_template& lqual__cb() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__data& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__data__cnf__dt : public Base_Type {
  PCUIF__Sapi field_sapi;
  OCTETSTRING field_tlli;
  INTEGER field_fn;
  INTEGER field_arfcn;
  INTEGER field_trx__nr;
  INTEGER field_ts__nr;
  INTEGER field_block__nr;
  INTEGER field_rssi;
  INTEGER field_ber10k;
  INTEGER field_ta__offs__qbits;
  INTEGER field_lqual__cb;
public:
  PCUIF__data__cnf__dt();
  PCUIF__data__cnf__dt(const PCUIF__Sapi& par_sapi,
    const OCTETSTRING& par_tlli,
    const INTEGER& par_fn,
    const INTEGER& par_arfcn,
    const INTEGER& par_trx__nr,
    const INTEGER& par_ts__nr,
    const INTEGER& par_block__nr,
    const INTEGER& par_rssi,
    const INTEGER& par_ber10k,
    const INTEGER& par_ta__offs__qbits,
    const INTEGER& par_lqual__cb);
  PCUIF__data__cnf__dt(const PCUIF__data__cnf__dt& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__data__cnf__dt& operator=(const PCUIF__data__cnf__dt& other_value);
  boolean operator==(const PCUIF__data__cnf__dt& other_value) const;
  inline boolean operator!=(const PCUIF__data__cnf__dt& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline PCUIF__Sapi& sapi()
    {return field_sapi;}
  inline const PCUIF__Sapi& sapi() const
    {return field_sapi;}
  inline OCTETSTRING& tlli()
    {return field_tlli;}
  inline const OCTETSTRING& tlli() const
    {return field_tlli;}
  inline INTEGER& fn()
    {return field_fn;}
  inline const INTEGER& fn() const
    {return field_fn;}
  inline INTEGER& arfcn()
    {return field_arfcn;}
  inline const INTEGER& arfcn() const
    {return field_arfcn;}
  inline INTEGER& trx__nr()
    {return field_trx__nr;}
  inline const INTEGER& trx__nr() const
    {return field_trx__nr;}
  inline INTEGER& ts__nr()
    {return field_ts__nr;}
  inline const INTEGER& ts__nr() const
    {return field_ts__nr;}
  inline INTEGER& block__nr()
    {return field_block__nr;}
  inline const INTEGER& block__nr() const
    {return field_block__nr;}
  inline INTEGER& rssi()
    {return field_rssi;}
  inline const INTEGER& rssi() const
    {return field_rssi;}
  inline INTEGER& ber10k()
    {return field_ber10k;}
  inline const INTEGER& ber10k() const
    {return field_ber10k;}
  inline INTEGER& ta__offs__qbits()
    {return field_ta__offs__qbits;}
  inline const INTEGER& ta__offs__qbits() const
    {return field_ta__offs__qbits;}
  inline INTEGER& lqual__cb()
    {return field_lqual__cb;}
  inline const INTEGER& lqual__cb() const
    {return field_lqual__cb;}
  inline int size_of() const
    {return 11;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__data__cnf__dt_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__data__cnf__dt_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__data__cnf__dt& other_value);
void copy_template(const PCUIF__data__cnf__dt_template& other_value);

public:
PCUIF__data__cnf__dt_template();
PCUIF__data__cnf__dt_template(template_sel other_value);
PCUIF__data__cnf__dt_template(const PCUIF__data__cnf__dt& other_value);
PCUIF__data__cnf__dt_template(const OPTIONAL<PCUIF__data__cnf__dt>& other_value);
PCUIF__data__cnf__dt_template(const PCUIF__data__cnf__dt_template& other_value);
~PCUIF__data__cnf__dt_template();
PCUIF__data__cnf__dt_template& operator=(template_sel other_value);
PCUIF__data__cnf__dt_template& operator=(const PCUIF__data__cnf__dt& other_value);
PCUIF__data__cnf__dt_template& operator=(const OPTIONAL<PCUIF__data__cnf__dt>& other_value);
PCUIF__data__cnf__dt_template& operator=(const PCUIF__data__cnf__dt_template& other_value);
boolean match(const PCUIF__data__cnf__dt& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__data__cnf__dt valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__data__cnf__dt_template& list_item(unsigned int list_index) const;
PCUIF__Sapi_template& sapi();
const PCUIF__Sapi_template& sapi() const;
OCTETSTRING_template& tlli();
const OCTETSTRING_template& tlli() const;
INTEGER_template& fn();
const INTEGER_template& fn() const;
INTEGER_template& arfcn();
const INTEGER_template& arfcn() const;
INTEGER_template& trx__nr();
const INTEGER_template& trx__nr() const;
INTEGER_template& ts__nr();
const INTEGER_template& ts__nr() const;
INTEGER_template& block__nr();
const INTEGER_template& block__nr() const;
INTEGER_template& rssi();
const INTEGER_template& rssi() const;
INTEGER_template& ber10k();
const INTEGER_template& ber10k() const;
INTEGER_template& ta__offs__qbits();
const INTEGER_template& ta__offs__qbits() const;
INTEGER_template& lqual__cb();
const INTEGER_template& lqual__cb() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__data__cnf__dt& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__rts__req : public Base_Type {
  PCUIF__Sapi field_sapi;
  OCTETSTRING field_spare;
  INTEGER field_fn;
  INTEGER field_arfcn;
  INTEGER field_trx__nr;
  INTEGER field_ts__nr;
  INTEGER field_block__nr;
public:
  PCUIF__rts__req();
  PCUIF__rts__req(const PCUIF__Sapi& par_sapi,
    const OCTETSTRING& par_spare,
    const INTEGER& par_fn,
    const INTEGER& par_arfcn,
    const INTEGER& par_trx__nr,
    const INTEGER& par_ts__nr,
    const INTEGER& par_block__nr);
  PCUIF__rts__req(const PCUIF__rts__req& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__rts__req& operator=(const PCUIF__rts__req& other_value);
  boolean operator==(const PCUIF__rts__req& other_value) const;
  inline boolean operator!=(const PCUIF__rts__req& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline PCUIF__Sapi& sapi()
    {return field_sapi;}
  inline const PCUIF__Sapi& sapi() const
    {return field_sapi;}
  inline OCTETSTRING& spare()
    {return field_spare;}
  inline const OCTETSTRING& spare() const
    {return field_spare;}
  inline INTEGER& fn()
    {return field_fn;}
  inline const INTEGER& fn() const
    {return field_fn;}
  inline INTEGER& arfcn()
    {return field_arfcn;}
  inline const INTEGER& arfcn() const
    {return field_arfcn;}
  inline INTEGER& trx__nr()
    {return field_trx__nr;}
  inline const INTEGER& trx__nr() const
    {return field_trx__nr;}
  inline INTEGER& ts__nr()
    {return field_ts__nr;}
  inline const INTEGER& ts__nr() const
    {return field_ts__nr;}
  inline INTEGER& block__nr()
    {return field_block__nr;}
  inline const INTEGER& block__nr() const
    {return field_block__nr;}
  inline int size_of() const
    {return 7;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__rts__req_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__rts__req_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__rts__req& other_value);
void copy_template(const PCUIF__rts__req_template& other_value);

public:
PCUIF__rts__req_template();
PCUIF__rts__req_template(template_sel other_value);
PCUIF__rts__req_template(const PCUIF__rts__req& other_value);
PCUIF__rts__req_template(const OPTIONAL<PCUIF__rts__req>& other_value);
PCUIF__rts__req_template(const PCUIF__rts__req_template& other_value);
~PCUIF__rts__req_template();
PCUIF__rts__req_template& operator=(template_sel other_value);
PCUIF__rts__req_template& operator=(const PCUIF__rts__req& other_value);
PCUIF__rts__req_template& operator=(const OPTIONAL<PCUIF__rts__req>& other_value);
PCUIF__rts__req_template& operator=(const PCUIF__rts__req_template& other_value);
boolean match(const PCUIF__rts__req& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__rts__req valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__rts__req_template& list_item(unsigned int list_index) const;
PCUIF__Sapi_template& sapi();
const PCUIF__Sapi_template& sapi() const;
OCTETSTRING_template& spare();
const OCTETSTRING_template& spare() const;
INTEGER_template& fn();
const INTEGER_template& fn() const;
INTEGER_template& arfcn();
const INTEGER_template& arfcn() const;
INTEGER_template& trx__nr();
const INTEGER_template& trx__nr() const;
INTEGER_template& ts__nr();
const INTEGER_template& ts__nr() const;
INTEGER_template& block__nr();
const INTEGER_template& block__nr() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__rts__req& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__BurstType : public Base_Type { // enum
friend class PCUIF__BurstType_template;
public:
enum enum_type { BURST__TYPE__NONE = 0, BURST__TYPE__0 = 1, BURST__TYPE__1 = 2, BURST__TYPE__2 = 3, UNKNOWN_VALUE = 4, UNBOUND_VALUE = 5 };
private:
enum_type enum_value;

public:
PCUIF__BurstType();
PCUIF__BurstType(int other_value);
PCUIF__BurstType(enum_type other_value);
PCUIF__BurstType(const PCUIF__BurstType& other_value);

PCUIF__BurstType& operator=(int other_value);
PCUIF__BurstType& operator=(enum_type other_value);
PCUIF__BurstType& operator=(const PCUIF__BurstType& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const PCUIF__BurstType& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const PCUIF__BurstType& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const PCUIF__BurstType& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const PCUIF__BurstType& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const PCUIF__BurstType& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const PCUIF__BurstType& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const PCUIF__BurstType& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
void int2enum(int int_val);
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__BurstType_template : public Base_Template {
union {
PCUIF__BurstType::enum_type single_value;
struct {
unsigned int n_values;
PCUIF__BurstType_template *list_value;
} value_list;
};

void copy_template(const PCUIF__BurstType_template& other_value);

public:
PCUIF__BurstType_template();
PCUIF__BurstType_template(template_sel other_value);
PCUIF__BurstType_template(int other_value);
PCUIF__BurstType_template(PCUIF__BurstType::enum_type other_value);
PCUIF__BurstType_template(const PCUIF__BurstType& other_value);
PCUIF__BurstType_template(const OPTIONAL<PCUIF__BurstType>& other_value);
PCUIF__BurstType_template(const PCUIF__BurstType_template& other_value);
~PCUIF__BurstType_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__BurstType_template& operator=(template_sel other_value);
PCUIF__BurstType_template& operator=(int other_value);
PCUIF__BurstType_template& operator=(PCUIF__BurstType::enum_type other_value);
PCUIF__BurstType_template& operator=(const PCUIF__BurstType& other_value);
PCUIF__BurstType_template& operator=(const OPTIONAL<PCUIF__BurstType>& other_value);
PCUIF__BurstType_template& operator=(const PCUIF__BurstType_template& other_value);

boolean match(PCUIF__BurstType::enum_type other_value, boolean legacy = FALSE) const;
boolean match(const PCUIF__BurstType& other_value, boolean legacy = FALSE) const;
PCUIF__BurstType::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__BurstType_template& list_item(unsigned int list_index);
void log() const;
void log_match(const PCUIF__BurstType& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class PCUIF__rach__ind : public Base_Type {
  PCUIF__Sapi field_sapi;
  INTEGER field_ra;
  INTEGER field_qta;
  INTEGER field_fn;
  INTEGER field_arfcn;
  INTEGER field_is__11bit;
  PCUIF__BurstType field_burst__type;
public:
  PCUIF__rach__ind();
  PCUIF__rach__ind(const PCUIF__Sapi& par_sapi,
    const INTEGER& par_ra,
    const INTEGER& par_qta,
    const INTEGER& par_fn,
    const INTEGER& par_arfcn,
    const INTEGER& par_is__11bit,
    const PCUIF__BurstType& par_burst__type);
  PCUIF__rach__ind(const PCUIF__rach__ind& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__rach__ind& operator=(const PCUIF__rach__ind& other_value);
  boolean operator==(const PCUIF__rach__ind& other_value) const;
  inline boolean operator!=(const PCUIF__rach__ind& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline PCUIF__Sapi& sapi()
    {return field_sapi;}
  inline const PCUIF__Sapi& sapi() const
    {return field_sapi;}
  inline INTEGER& ra()
    {return field_ra;}
  inline const INTEGER& ra() const
    {return field_ra;}
  inline INTEGER& qta()
    {return field_qta;}
  inline const INTEGER& qta() const
    {return field_qta;}
  inline INTEGER& fn()
    {return field_fn;}
  inline const INTEGER& fn() const
    {return field_fn;}
  inline INTEGER& arfcn()
    {return field_arfcn;}
  inline const INTEGER& arfcn() const
    {return field_arfcn;}
  inline INTEGER& is__11bit()
    {return field_is__11bit;}
  inline const INTEGER& is__11bit() const
    {return field_is__11bit;}
  inline PCUIF__BurstType& burst__type()
    {return field_burst__type;}
  inline const PCUIF__BurstType& burst__type() const
    {return field_burst__type;}
  inline int size_of() const
    {return 7;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__rach__ind_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__rach__ind_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__rach__ind& other_value);
void copy_template(const PCUIF__rach__ind_template& other_value);

public:
PCUIF__rach__ind_template();
PCUIF__rach__ind_template(template_sel other_value);
PCUIF__rach__ind_template(const PCUIF__rach__ind& other_value);
PCUIF__rach__ind_template(const OPTIONAL<PCUIF__rach__ind>& other_value);
PCUIF__rach__ind_template(const PCUIF__rach__ind_template& other_value);
~PCUIF__rach__ind_template();
PCUIF__rach__ind_template& operator=(template_sel other_value);
PCUIF__rach__ind_template& operator=(const PCUIF__rach__ind& other_value);
PCUIF__rach__ind_template& operator=(const OPTIONAL<PCUIF__rach__ind>& other_value);
PCUIF__rach__ind_template& operator=(const PCUIF__rach__ind_template& other_value);
boolean match(const PCUIF__rach__ind& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__rach__ind valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__rach__ind_template& list_item(unsigned int list_index) const;
PCUIF__Sapi_template& sapi();
const PCUIF__Sapi_template& sapi() const;
INTEGER_template& ra();
const INTEGER_template& ra() const;
INTEGER_template& qta();
const INTEGER_template& qta() const;
INTEGER_template& fn();
const INTEGER_template& fn() const;
INTEGER_template& arfcn();
const INTEGER_template& arfcn() const;
INTEGER_template& is__11bit();
const INTEGER_template& is__11bit() const;
PCUIF__BurstType_template& burst__type();
const PCUIF__BurstType_template& burst__type() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__rach__ind& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__InfoTrx : public Base_Type {
  INTEGER field_arfcn;
  BITSTRING field_pdch__mask;
  OCTETSTRING field_spare;
  OCTETSTRING field_tsc;
  INTEGER field_hLayer1;
public:
  PCUIF__InfoTrx();
  PCUIF__InfoTrx(const INTEGER& par_arfcn,
    const BITSTRING& par_pdch__mask,
    const OCTETSTRING& par_spare,
    const OCTETSTRING& par_tsc,
    const INTEGER& par_hLayer1);
  PCUIF__InfoTrx(const PCUIF__InfoTrx& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__InfoTrx& operator=(const PCUIF__InfoTrx& other_value);
  boolean operator==(const PCUIF__InfoTrx& other_value) const;
  inline boolean operator!=(const PCUIF__InfoTrx& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline INTEGER& arfcn()
    {return field_arfcn;}
  inline const INTEGER& arfcn() const
    {return field_arfcn;}
  inline BITSTRING& pdch__mask()
    {return field_pdch__mask;}
  inline const BITSTRING& pdch__mask() const
    {return field_pdch__mask;}
  inline OCTETSTRING& spare()
    {return field_spare;}
  inline const OCTETSTRING& spare() const
    {return field_spare;}
  inline OCTETSTRING& tsc()
    {return field_tsc;}
  inline const OCTETSTRING& tsc() const
    {return field_tsc;}
  inline INTEGER& hLayer1()
    {return field_hLayer1;}
  inline const INTEGER& hLayer1() const
    {return field_hLayer1;}
  inline int size_of() const
    {return 5;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__InfoTrx_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__InfoTrx_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__InfoTrx& other_value);
void copy_template(const PCUIF__InfoTrx_template& other_value);

public:
PCUIF__InfoTrx_template();
PCUIF__InfoTrx_template(template_sel other_value);
PCUIF__InfoTrx_template(const PCUIF__InfoTrx& other_value);
PCUIF__InfoTrx_template(const OPTIONAL<PCUIF__InfoTrx>& other_value);
PCUIF__InfoTrx_template(const PCUIF__InfoTrx_template& other_value);
~PCUIF__InfoTrx_template();
PCUIF__InfoTrx_template& operator=(template_sel other_value);
PCUIF__InfoTrx_template& operator=(const PCUIF__InfoTrx& other_value);
PCUIF__InfoTrx_template& operator=(const OPTIONAL<PCUIF__InfoTrx>& other_value);
PCUIF__InfoTrx_template& operator=(const PCUIF__InfoTrx_template& other_value);
boolean match(const PCUIF__InfoTrx& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__InfoTrx valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__InfoTrx_template& list_item(unsigned int list_index) const;
INTEGER_template& arfcn();
const INTEGER_template& arfcn() const;
BITSTRING_template& pdch__mask();
const BITSTRING_template& pdch__mask() const;
OCTETSTRING_template& spare();
const OCTETSTRING_template& spare() const;
OCTETSTRING_template& tsc();
const OCTETSTRING_template& tsc() const;
INTEGER_template& hLayer1();
const INTEGER_template& hLayer1() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__InfoTrx& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__InfoTrxs : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
PCUIF__InfoTrx **value_elements;
} *val_ptr;

static const PCUIF__InfoTrx UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const PCUIF__InfoTrxs& other_value);

public:
  typedef PCUIF__InfoTrx of_type;
PCUIF__InfoTrxs();
PCUIF__InfoTrxs(null_type other_value);
PCUIF__InfoTrxs(const PCUIF__InfoTrxs& other_value);
~PCUIF__InfoTrxs();

void clean_up();
PCUIF__InfoTrxs& operator=(null_type other_value);
PCUIF__InfoTrxs& operator=(const PCUIF__InfoTrxs& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const PCUIF__InfoTrxs& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const PCUIF__InfoTrxs& other_value) const { return !(*this == other_value); }

PCUIF__InfoTrx& operator[](int index_value);
PCUIF__InfoTrx& operator[](const INTEGER& index_value);
const PCUIF__InfoTrx& operator[](int index_value) const;
const PCUIF__InfoTrx& operator[](const INTEGER& index_value) const;

PCUIF__InfoTrxs operator<<=(int rotate_count) const;
PCUIF__InfoTrxs operator<<=(const INTEGER& rotate_count) const;
PCUIF__InfoTrxs operator>>=(int rotate_count) const;
PCUIF__InfoTrxs operator>>=(const INTEGER& rotate_count) const;

PCUIF__InfoTrxs operator+(const PCUIF__InfoTrxs& other_value) const;

PCUIF__InfoTrxs substr(int index, int returncount) const;

PCUIF__InfoTrxs replace(int index, int len, const PCUIF__InfoTrxs& repl) const;

PCUIF__InfoTrxs replace(int index, int len, const PCUIF__InfoTrxs_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__InfoTrxs_template : public Record_Of_Template {
union {
struct {
int n_elements;
PCUIF__InfoTrx_template **value_elements;
} single_value;
struct {
unsigned int n_values;
PCUIF__InfoTrxs_template *list_value;
} value_list;
};
void copy_value(const PCUIF__InfoTrxs& other_value);
void copy_template(const PCUIF__InfoTrxs_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);

public:
PCUIF__InfoTrxs_template();
PCUIF__InfoTrxs_template(template_sel other_value);
PCUIF__InfoTrxs_template(null_type other_value);
PCUIF__InfoTrxs_template(const PCUIF__InfoTrxs& other_value);
PCUIF__InfoTrxs_template(const OPTIONAL<PCUIF__InfoTrxs>& other_value);
PCUIF__InfoTrxs_template(const PCUIF__InfoTrxs_template& other_value);
~PCUIF__InfoTrxs_template();

void clean_up();
PCUIF__InfoTrxs_template& operator=(template_sel other_value);
PCUIF__InfoTrxs_template& operator=(null_type other_value);
PCUIF__InfoTrxs_template& operator=(const PCUIF__InfoTrxs& other_value);
PCUIF__InfoTrxs_template& operator=(const OPTIONAL<PCUIF__InfoTrxs>& other_value);
PCUIF__InfoTrxs_template& operator=(const PCUIF__InfoTrxs_template& other_value);

PCUIF__InfoTrx_template& operator[](int index_value);
PCUIF__InfoTrx_template& operator[](const INTEGER& index_value);
const PCUIF__InfoTrx_template& operator[](int index_value) const;
const PCUIF__InfoTrx_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const PCUIF__InfoTrxs& other_value, boolean legacy = FALSE) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
PCUIF__InfoTrxs valueof() const;
PCUIF__InfoTrxs substr(int index, int returncount) const;

PCUIF__InfoTrxs replace(int index, int len, const PCUIF__InfoTrxs_template& repl) const;

PCUIF__InfoTrxs replace(int index, int len, const PCUIF__InfoTrxs& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
PCUIF__InfoTrxs_template& list_item(unsigned int list_index);
void log() const;
void log_match(const PCUIF__InfoTrxs& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean get_istemplate_kind(const char* type) const;
};

class PCUIF__info__ind : public Base_Type {
  INTEGER field_version;
  PCUIF__Flags field_flags;
  PCUIF__InfoTrxs field_trx;
  INTEGER field_bsic;
  INTEGER field_mcc;
  INTEGER field_mnc;
  INTEGER field_mnc__3__digits;
  INTEGER field_lac;
  INTEGER field_rac;
  INTEGER field_nsei;
  PCUIF__info__ind_nse__timer field_nse__timer;
  PCUIF__info__ind_cell__timer field_cell__timer;
  INTEGER field_cell__id;
  INTEGER field_repeat__time;
  INTEGER field_repeat__count;
  INTEGER field_bvci;
  INTEGER field_t3142;
  INTEGER field_t3169;
  INTEGER field_t3191;
  INTEGER field_t3193__10ms;
  INTEGER field_t3195;
  INTEGER field_t3101;
  INTEGER field_t3103;
  INTEGER field_t3105;
  INTEGER field_cv__countdown;
  INTEGER field_dl__tbf__ext;
  INTEGER field_ul__tbf__ext;
  INTEGER field_initial__cs;
  INTEGER field_initial__mcs;
  PCUIF__info__ind_nsvci field_nsvci;
  PCUIF__info__ind_local__pprt field_local__pprt;
  PCUIF__info__ind_remote__port field_remote__port;
  PCUIF__info__ind_remote__ip field_remote__ip;
public:
  PCUIF__info__ind();
  PCUIF__info__ind(const INTEGER& par_version,
    const PCUIF__Flags& par_flags,
    const PCUIF__InfoTrxs& par_trx,
    const INTEGER& par_bsic,
    const INTEGER& par_mcc,
    const INTEGER& par_mnc,
    const INTEGER& par_mnc__3__digits,
    const INTEGER& par_lac,
    const INTEGER& par_rac,
    const INTEGER& par_nsei,
    const PCUIF__info__ind_nse__timer& par_nse__timer,
    const PCUIF__info__ind_cell__timer& par_cell__timer,
    const INTEGER& par_cell__id,
    const INTEGER& par_repeat__time,
    const INTEGER& par_repeat__count,
    const INTEGER& par_bvci,
    const INTEGER& par_t3142,
    const INTEGER& par_t3169,
    const INTEGER& par_t3191,
    const INTEGER& par_t3193__10ms,
    const INTEGER& par_t3195,
    const INTEGER& par_t3101,
    const INTEGER& par_t3103,
    const INTEGER& par_t3105,
    const INTEGER& par_cv__countdown,
    const INTEGER& par_dl__tbf__ext,
    const INTEGER& par_ul__tbf__ext,
    const INTEGER& par_initial__cs,
    const INTEGER& par_initial__mcs,
    const PCUIF__info__ind_nsvci& par_nsvci,
    const PCUIF__info__ind_local__pprt& par_local__pprt,
    const PCUIF__info__ind_remote__port& par_remote__port,
    const PCUIF__info__ind_remote__ip& par_remote__ip);
  PCUIF__info__ind(const PCUIF__info__ind& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__info__ind& operator=(const PCUIF__info__ind& other_value);
  boolean operator==(const PCUIF__info__ind& other_value) const;
  inline boolean operator!=(const PCUIF__info__ind& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline INTEGER& version()
    {return field_version;}
  inline const INTEGER& version() const
    {return field_version;}
  inline PCUIF__Flags& flags()
    {return field_flags;}
  inline const PCUIF__Flags& flags() const
    {return field_flags;}
  inline PCUIF__InfoTrxs& trx()
    {return field_trx;}
  inline const PCUIF__InfoTrxs& trx() const
    {return field_trx;}
  inline INTEGER& bsic()
    {return field_bsic;}
  inline const INTEGER& bsic() const
    {return field_bsic;}
  inline INTEGER& mcc()
    {return field_mcc;}
  inline const INTEGER& mcc() const
    {return field_mcc;}
  inline INTEGER& mnc()
    {return field_mnc;}
  inline const INTEGER& mnc() const
    {return field_mnc;}
  inline INTEGER& mnc__3__digits()
    {return field_mnc__3__digits;}
  inline const INTEGER& mnc__3__digits() const
    {return field_mnc__3__digits;}
  inline INTEGER& lac()
    {return field_lac;}
  inline const INTEGER& lac() const
    {return field_lac;}
  inline INTEGER& rac()
    {return field_rac;}
  inline const INTEGER& rac() const
    {return field_rac;}
  inline INTEGER& nsei()
    {return field_nsei;}
  inline const INTEGER& nsei() const
    {return field_nsei;}
  inline PCUIF__info__ind_nse__timer& nse__timer()
    {return field_nse__timer;}
  inline const PCUIF__info__ind_nse__timer& nse__timer() const
    {return field_nse__timer;}
  inline PCUIF__info__ind_cell__timer& cell__timer()
    {return field_cell__timer;}
  inline const PCUIF__info__ind_cell__timer& cell__timer() const
    {return field_cell__timer;}
  inline INTEGER& cell__id()
    {return field_cell__id;}
  inline const INTEGER& cell__id() const
    {return field_cell__id;}
  inline INTEGER& repeat__time()
    {return field_repeat__time;}
  inline const INTEGER& repeat__time() const
    {return field_repeat__time;}
  inline INTEGER& repeat__count()
    {return field_repeat__count;}
  inline const INTEGER& repeat__count() const
    {return field_repeat__count;}
  inline INTEGER& bvci()
    {return field_bvci;}
  inline const INTEGER& bvci() const
    {return field_bvci;}
  inline INTEGER& t3142()
    {return field_t3142;}
  inline const INTEGER& t3142() const
    {return field_t3142;}
  inline INTEGER& t3169()
    {return field_t3169;}
  inline const INTEGER& t3169() const
    {return field_t3169;}
  inline INTEGER& t3191()
    {return field_t3191;}
  inline const INTEGER& t3191() const
    {return field_t3191;}
  inline INTEGER& t3193__10ms()
    {return field_t3193__10ms;}
  inline const INTEGER& t3193__10ms() const
    {return field_t3193__10ms;}
  inline INTEGER& t3195()
    {return field_t3195;}
  inline const INTEGER& t3195() const
    {return field_t3195;}
  inline INTEGER& t3101()
    {return field_t3101;}
  inline const INTEGER& t3101() const
    {return field_t3101;}
  inline INTEGER& t3103()
    {return field_t3103;}
  inline const INTEGER& t3103() const
    {return field_t3103;}
  inline INTEGER& t3105()
    {return field_t3105;}
  inline const INTEGER& t3105() const
    {return field_t3105;}
  inline INTEGER& cv__countdown()
    {return field_cv__countdown;}
  inline const INTEGER& cv__countdown() const
    {return field_cv__countdown;}
  inline INTEGER& dl__tbf__ext()
    {return field_dl__tbf__ext;}
  inline const INTEGER& dl__tbf__ext() const
    {return field_dl__tbf__ext;}
  inline INTEGER& ul__tbf__ext()
    {return field_ul__tbf__ext;}
  inline const INTEGER& ul__tbf__ext() const
    {return field_ul__tbf__ext;}
  inline INTEGER& initial__cs()
    {return field_initial__cs;}
  inline const INTEGER& initial__cs() const
    {return field_initial__cs;}
  inline INTEGER& initial__mcs()
    {return field_initial__mcs;}
  inline const INTEGER& initial__mcs() const
    {return field_initial__mcs;}
  inline PCUIF__info__ind_nsvci& nsvci()
    {return field_nsvci;}
  inline const PCUIF__info__ind_nsvci& nsvci() const
    {return field_nsvci;}
  inline PCUIF__info__ind_local__pprt& local__pprt()
    {return field_local__pprt;}
  inline const PCUIF__info__ind_local__pprt& local__pprt() const
    {return field_local__pprt;}
  inline PCUIF__info__ind_remote__port& remote__port()
    {return field_remote__port;}
  inline const PCUIF__info__ind_remote__port& remote__port() const
    {return field_remote__port;}
  inline PCUIF__info__ind_remote__ip& remote__ip()
    {return field_remote__ip;}
  inline const PCUIF__info__ind_remote__ip& remote__ip() const
    {return field_remote__ip;}
  inline int size_of() const
    {return 33;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__info__ind_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__info__ind_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__info__ind& other_value);
void copy_template(const PCUIF__info__ind_template& other_value);

public:
PCUIF__info__ind_template();
PCUIF__info__ind_template(template_sel other_value);
PCUIF__info__ind_template(const PCUIF__info__ind& other_value);
PCUIF__info__ind_template(const OPTIONAL<PCUIF__info__ind>& other_value);
PCUIF__info__ind_template(const PCUIF__info__ind_template& other_value);
~PCUIF__info__ind_template();
PCUIF__info__ind_template& operator=(template_sel other_value);
PCUIF__info__ind_template& operator=(const PCUIF__info__ind& other_value);
PCUIF__info__ind_template& operator=(const OPTIONAL<PCUIF__info__ind>& other_value);
PCUIF__info__ind_template& operator=(const PCUIF__info__ind_template& other_value);
boolean match(const PCUIF__info__ind& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__info__ind valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__info__ind_template& list_item(unsigned int list_index) const;
INTEGER_template& version();
const INTEGER_template& version() const;
PCUIF__Flags_template& flags();
const PCUIF__Flags_template& flags() const;
PCUIF__InfoTrxs_template& trx();
const PCUIF__InfoTrxs_template& trx() const;
INTEGER_template& bsic();
const INTEGER_template& bsic() const;
INTEGER_template& mcc();
const INTEGER_template& mcc() const;
INTEGER_template& mnc();
const INTEGER_template& mnc() const;
INTEGER_template& mnc__3__digits();
const INTEGER_template& mnc__3__digits() const;
INTEGER_template& lac();
const INTEGER_template& lac() const;
INTEGER_template& rac();
const INTEGER_template& rac() const;
INTEGER_template& nsei();
const INTEGER_template& nsei() const;
PCUIF__info__ind_nse__timer_template& nse__timer();
const PCUIF__info__ind_nse__timer_template& nse__timer() const;
PCUIF__info__ind_cell__timer_template& cell__timer();
const PCUIF__info__ind_cell__timer_template& cell__timer() const;
INTEGER_template& cell__id();
const INTEGER_template& cell__id() const;
INTEGER_template& repeat__time();
const INTEGER_template& repeat__time() const;
INTEGER_template& repeat__count();
const INTEGER_template& repeat__count() const;
INTEGER_template& bvci();
const INTEGER_template& bvci() const;
INTEGER_template& t3142();
const INTEGER_template& t3142() const;
INTEGER_template& t3169();
const INTEGER_template& t3169() const;
INTEGER_template& t3191();
const INTEGER_template& t3191() const;
INTEGER_template& t3193__10ms();
const INTEGER_template& t3193__10ms() const;
INTEGER_template& t3195();
const INTEGER_template& t3195() const;
INTEGER_template& t3101();
const INTEGER_template& t3101() const;
INTEGER_template& t3103();
const INTEGER_template& t3103() const;
INTEGER_template& t3105();
const INTEGER_template& t3105() const;
INTEGER_template& cv__countdown();
const INTEGER_template& cv__countdown() const;
INTEGER_template& dl__tbf__ext();
const INTEGER_template& dl__tbf__ext() const;
INTEGER_template& ul__tbf__ext();
const INTEGER_template& ul__tbf__ext() const;
INTEGER_template& initial__cs();
const INTEGER_template& initial__cs() const;
INTEGER_template& initial__mcs();
const INTEGER_template& initial__mcs() const;
PCUIF__info__ind_nsvci_template& nsvci();
const PCUIF__info__ind_nsvci_template& nsvci() const;
PCUIF__info__ind_local__pprt_template& local__pprt();
const PCUIF__info__ind_local__pprt_template& local__pprt() const;
PCUIF__info__ind_remote__port_template& remote__port();
const PCUIF__info__ind_remote__port_template& remote__port() const;
PCUIF__info__ind_remote__ip_template& remote__ip();
const PCUIF__info__ind_remote__ip_template& remote__ip() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__info__ind& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__act__req : public Base_Type {
  INTEGER field_is__activate;
  INTEGER field_trx__nr;
  INTEGER field_ts__nr;
  OCTETSTRING field_spare;
public:
  PCUIF__act__req();
  PCUIF__act__req(const INTEGER& par_is__activate,
    const INTEGER& par_trx__nr,
    const INTEGER& par_ts__nr,
    const OCTETSTRING& par_spare);
  PCUIF__act__req(const PCUIF__act__req& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__act__req& operator=(const PCUIF__act__req& other_value);
  boolean operator==(const PCUIF__act__req& other_value) const;
  inline boolean operator!=(const PCUIF__act__req& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline INTEGER& is__activate()
    {return field_is__activate;}
  inline const INTEGER& is__activate() const
    {return field_is__activate;}
  inline INTEGER& trx__nr()
    {return field_trx__nr;}
  inline const INTEGER& trx__nr() const
    {return field_trx__nr;}
  inline INTEGER& ts__nr()
    {return field_ts__nr;}
  inline const INTEGER& ts__nr() const
    {return field_ts__nr;}
  inline OCTETSTRING& spare()
    {return field_spare;}
  inline const OCTETSTRING& spare() const
    {return field_spare;}
  inline int size_of() const
    {return 4;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__act__req_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__act__req_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__act__req& other_value);
void copy_template(const PCUIF__act__req_template& other_value);

public:
PCUIF__act__req_template();
PCUIF__act__req_template(template_sel other_value);
PCUIF__act__req_template(const PCUIF__act__req& other_value);
PCUIF__act__req_template(const OPTIONAL<PCUIF__act__req>& other_value);
PCUIF__act__req_template(const PCUIF__act__req_template& other_value);
~PCUIF__act__req_template();
PCUIF__act__req_template& operator=(template_sel other_value);
PCUIF__act__req_template& operator=(const PCUIF__act__req& other_value);
PCUIF__act__req_template& operator=(const OPTIONAL<PCUIF__act__req>& other_value);
PCUIF__act__req_template& operator=(const PCUIF__act__req_template& other_value);
boolean match(const PCUIF__act__req& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__act__req valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__act__req_template& list_item(unsigned int list_index) const;
INTEGER_template& is__activate();
const INTEGER_template& is__activate() const;
INTEGER_template& trx__nr();
const INTEGER_template& trx__nr() const;
INTEGER_template& ts__nr();
const INTEGER_template& ts__nr() const;
OCTETSTRING_template& spare();
const OCTETSTRING_template& spare() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__act__req& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__time__ind : public Base_Type {
  INTEGER field_fn;
public:
  PCUIF__time__ind();
  PCUIF__time__ind(const INTEGER& par_fn);
  PCUIF__time__ind(const PCUIF__time__ind& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__time__ind& operator=(const PCUIF__time__ind& other_value);
  boolean operator==(const PCUIF__time__ind& other_value) const;
  inline boolean operator!=(const PCUIF__time__ind& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline INTEGER& fn()
    {return field_fn;}
  inline const INTEGER& fn() const
    {return field_fn;}
  inline int size_of() const
    {return 1;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__time__ind_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__time__ind_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__time__ind& other_value);
void copy_template(const PCUIF__time__ind_template& other_value);

public:
PCUIF__time__ind_template();
PCUIF__time__ind_template(template_sel other_value);
PCUIF__time__ind_template(const PCUIF__time__ind& other_value);
PCUIF__time__ind_template(const OPTIONAL<PCUIF__time__ind>& other_value);
PCUIF__time__ind_template(const PCUIF__time__ind_template& other_value);
~PCUIF__time__ind_template();
PCUIF__time__ind_template& operator=(template_sel other_value);
PCUIF__time__ind_template& operator=(const PCUIF__time__ind& other_value);
PCUIF__time__ind_template& operator=(const OPTIONAL<PCUIF__time__ind>& other_value);
PCUIF__time__ind_template& operator=(const PCUIF__time__ind_template& other_value);
boolean match(const PCUIF__time__ind& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__time__ind valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__time__ind_template& list_item(unsigned int list_index) const;
INTEGER_template& fn();
const INTEGER_template& fn() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__time__ind& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__pag__req : public Base_Type {
  PCUIF__Sapi field_sapi;
  INTEGER field_chan__needed;
  OCTETSTRING field_identity__lv;
public:
  PCUIF__pag__req();
  PCUIF__pag__req(const PCUIF__Sapi& par_sapi,
    const INTEGER& par_chan__needed,
    const OCTETSTRING& par_identity__lv);
  PCUIF__pag__req(const PCUIF__pag__req& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__pag__req& operator=(const PCUIF__pag__req& other_value);
  boolean operator==(const PCUIF__pag__req& other_value) const;
  inline boolean operator!=(const PCUIF__pag__req& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline PCUIF__Sapi& sapi()
    {return field_sapi;}
  inline const PCUIF__Sapi& sapi() const
    {return field_sapi;}
  inline INTEGER& chan__needed()
    {return field_chan__needed;}
  inline const INTEGER& chan__needed() const
    {return field_chan__needed;}
  inline OCTETSTRING& identity__lv()
    {return field_identity__lv;}
  inline const OCTETSTRING& identity__lv() const
    {return field_identity__lv;}
  inline int size_of() const
    {return 3;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__pag__req_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__pag__req_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__pag__req& other_value);
void copy_template(const PCUIF__pag__req_template& other_value);

public:
PCUIF__pag__req_template();
PCUIF__pag__req_template(template_sel other_value);
PCUIF__pag__req_template(const PCUIF__pag__req& other_value);
PCUIF__pag__req_template(const OPTIONAL<PCUIF__pag__req>& other_value);
PCUIF__pag__req_template(const PCUIF__pag__req_template& other_value);
~PCUIF__pag__req_template();
PCUIF__pag__req_template& operator=(template_sel other_value);
PCUIF__pag__req_template& operator=(const PCUIF__pag__req& other_value);
PCUIF__pag__req_template& operator=(const OPTIONAL<PCUIF__pag__req>& other_value);
PCUIF__pag__req_template& operator=(const PCUIF__pag__req_template& other_value);
boolean match(const PCUIF__pag__req& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__pag__req valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__pag__req_template& list_item(unsigned int list_index) const;
PCUIF__Sapi_template& sapi();
const PCUIF__Sapi_template& sapi() const;
INTEGER_template& chan__needed();
const INTEGER_template& chan__needed() const;
OCTETSTRING_template& identity__lv();
const OCTETSTRING_template& identity__lv() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__pag__req& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__susp__req : public Base_Type {
  OCTETSTRING field_tlli;
  OCTETSTRING field_ra__id;
  INTEGER field_cause;
public:
  PCUIF__susp__req();
  PCUIF__susp__req(const OCTETSTRING& par_tlli,
    const OCTETSTRING& par_ra__id,
    const INTEGER& par_cause);
  PCUIF__susp__req(const PCUIF__susp__req& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__susp__req& operator=(const PCUIF__susp__req& other_value);
  boolean operator==(const PCUIF__susp__req& other_value) const;
  inline boolean operator!=(const PCUIF__susp__req& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OCTETSTRING& tlli()
    {return field_tlli;}
  inline const OCTETSTRING& tlli() const
    {return field_tlli;}
  inline OCTETSTRING& ra__id()
    {return field_ra__id;}
  inline const OCTETSTRING& ra__id() const
    {return field_ra__id;}
  inline INTEGER& cause()
    {return field_cause;}
  inline const INTEGER& cause() const
    {return field_cause;}
  inline int size_of() const
    {return 3;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__susp__req_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__susp__req_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__susp__req& other_value);
void copy_template(const PCUIF__susp__req_template& other_value);

public:
PCUIF__susp__req_template();
PCUIF__susp__req_template(template_sel other_value);
PCUIF__susp__req_template(const PCUIF__susp__req& other_value);
PCUIF__susp__req_template(const OPTIONAL<PCUIF__susp__req>& other_value);
PCUIF__susp__req_template(const PCUIF__susp__req_template& other_value);
~PCUIF__susp__req_template();
PCUIF__susp__req_template& operator=(template_sel other_value);
PCUIF__susp__req_template& operator=(const PCUIF__susp__req& other_value);
PCUIF__susp__req_template& operator=(const OPTIONAL<PCUIF__susp__req>& other_value);
PCUIF__susp__req_template& operator=(const PCUIF__susp__req_template& other_value);
boolean match(const PCUIF__susp__req& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__susp__req valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__susp__req_template& list_item(unsigned int list_index) const;
OCTETSTRING_template& tlli();
const OCTETSTRING_template& tlli() const;
OCTETSTRING_template& ra__id();
const OCTETSTRING_template& ra__id() const;
INTEGER_template& cause();
const INTEGER_template& cause() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__susp__req& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class PCUIF__MsgUnion : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_data__req = 1, ALT_data__cnf = 2, ALT_data__cnf__dt = 3, ALT_data__ind = 4, ALT_susp__req = 5, ALT_rts__req = 6, ALT_rach__ind = 7, ALT_txt__ind = 8, ALT_info__ind = 9, ALT_act__req = 10, ALT_time__ind = 11, ALT_pag__req = 12 };
private:
union_selection_type union_selection;
union {
PCUIF__data *field_data__req;
PCUIF__data *field_data__cnf;
PCUIF__data__cnf__dt *field_data__cnf__dt;
PCUIF__data *field_data__ind;
PCUIF__susp__req *field_susp__req;
PCUIF__rts__req *field_rts__req;
PCUIF__rach__ind *field_rach__ind;
PCUIF__txt__ind *field_txt__ind;
PCUIF__info__ind *field_info__ind;
PCUIF__act__req *field_act__req;
PCUIF__time__ind *field_time__ind;
PCUIF__pag__req *field_pag__req;
};
void copy_value(const PCUIF__MsgUnion& other_value);

public:
PCUIF__MsgUnion();
PCUIF__MsgUnion(const PCUIF__MsgUnion& other_value);
~PCUIF__MsgUnion();
PCUIF__MsgUnion& operator=(const PCUIF__MsgUnion& other_value);
boolean operator==(const PCUIF__MsgUnion& other_value) const;
inline boolean operator!=(const PCUIF__MsgUnion& other_value) const { return !(*this == other_value); }
PCUIF__data& data__req();
const PCUIF__data& data__req() const;
PCUIF__data& data__cnf();
const PCUIF__data& data__cnf() const;
PCUIF__data__cnf__dt& data__cnf__dt();
const PCUIF__data__cnf__dt& data__cnf__dt() const;
PCUIF__data& data__ind();
const PCUIF__data& data__ind() const;
PCUIF__susp__req& susp__req();
const PCUIF__susp__req& susp__req() const;
PCUIF__rts__req& rts__req();
const PCUIF__rts__req& rts__req() const;
PCUIF__rach__ind& rach__ind();
const PCUIF__rach__ind& rach__ind() const;
PCUIF__txt__ind& txt__ind();
const PCUIF__txt__ind& txt__ind() const;
PCUIF__info__ind& info__ind();
const PCUIF__info__ind& info__ind() const;
PCUIF__act__req& act__req();
const PCUIF__act__req& act__req() const;
PCUIF__time__ind& time__ind();
const PCUIF__time__ind& time__ind() const;
PCUIF__pag__req& pag__req();
const PCUIF__pag__req& pag__req() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__MsgUnion_template : public Base_Template {
union {
struct {
PCUIF__MsgUnion::union_selection_type union_selection;
union {
PCUIF__data_template *field_data__req;
PCUIF__data_template *field_data__cnf;
PCUIF__data__cnf__dt_template *field_data__cnf__dt;
PCUIF__data_template *field_data__ind;
PCUIF__susp__req_template *field_susp__req;
PCUIF__rts__req_template *field_rts__req;
PCUIF__rach__ind_template *field_rach__ind;
PCUIF__txt__ind_template *field_txt__ind;
PCUIF__info__ind_template *field_info__ind;
PCUIF__act__req_template *field_act__req;
PCUIF__time__ind_template *field_time__ind;
PCUIF__pag__req_template *field_pag__req;
};
} single_value;
struct {
unsigned int n_values;
PCUIF__MsgUnion_template *list_value;
} value_list;
};
void copy_value(const PCUIF__MsgUnion& other_value);

void copy_template(const PCUIF__MsgUnion_template& other_value);

public:
PCUIF__MsgUnion_template();
PCUIF__MsgUnion_template(template_sel other_value);
PCUIF__MsgUnion_template(const PCUIF__MsgUnion& other_value);
PCUIF__MsgUnion_template(const OPTIONAL<PCUIF__MsgUnion>& other_value);
PCUIF__MsgUnion_template(const PCUIF__MsgUnion_template& other_value);
~PCUIF__MsgUnion_template();
void clean_up();
PCUIF__MsgUnion_template& operator=(template_sel other_value);
PCUIF__MsgUnion_template& operator=(const PCUIF__MsgUnion& other_value);
PCUIF__MsgUnion_template& operator=(const OPTIONAL<PCUIF__MsgUnion>& other_value);
PCUIF__MsgUnion_template& operator=(const PCUIF__MsgUnion_template& other_value);
boolean match(const PCUIF__MsgUnion& other_value, boolean legacy = FALSE) const;
boolean is_value() const;PCUIF__MsgUnion valueof() const;
PCUIF__MsgUnion_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__data_template& data__req();
const PCUIF__data_template& data__req() const;
PCUIF__data_template& data__cnf();
const PCUIF__data_template& data__cnf() const;
PCUIF__data__cnf__dt_template& data__cnf__dt();
const PCUIF__data__cnf__dt_template& data__cnf__dt() const;
PCUIF__data_template& data__ind();
const PCUIF__data_template& data__ind() const;
PCUIF__susp__req_template& susp__req();
const PCUIF__susp__req_template& susp__req() const;
PCUIF__rts__req_template& rts__req();
const PCUIF__rts__req_template& rts__req() const;
PCUIF__rach__ind_template& rach__ind();
const PCUIF__rach__ind_template& rach__ind() const;
PCUIF__txt__ind_template& txt__ind();
const PCUIF__txt__ind_template& txt__ind() const;
PCUIF__info__ind_template& info__ind();
const PCUIF__info__ind_template& info__ind() const;
PCUIF__act__req_template& act__req();
const PCUIF__act__req_template& act__req() const;
PCUIF__time__ind_template& time__ind();
const PCUIF__time__ind_template& time__ind() const;
PCUIF__pag__req_template& pag__req();
const PCUIF__pag__req_template& pag__req() const;
boolean ischosen(PCUIF__MsgUnion::union_selection_type checked_selection) const;
void log() const;
void log_match(const PCUIF__MsgUnion& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class PCUIF__Message : public Base_Type {
  PCUIF__MsgType field_msg__type;
  INTEGER field_bts__nr;
  OCTETSTRING field_spare;
  PCUIF__MsgUnion field_u;
public:
  PCUIF__Message();
  PCUIF__Message(const PCUIF__MsgType& par_msg__type,
    const INTEGER& par_bts__nr,
    const OCTETSTRING& par_spare,
    const PCUIF__MsgUnion& par_u);
  PCUIF__Message(const PCUIF__Message& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
const TTCN_Typedescriptor_t* get_descriptor() const;
  PCUIF__Message& operator=(const PCUIF__Message& other_value);
  boolean operator==(const PCUIF__Message& other_value) const;
  inline boolean operator!=(const PCUIF__Message& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline PCUIF__MsgType& msg__type()
    {return field_msg__type;}
  inline const PCUIF__MsgType& msg__type() const
    {return field_msg__type;}
  inline INTEGER& bts__nr()
    {return field_bts__nr;}
  inline const INTEGER& bts__nr() const
    {return field_bts__nr;}
  inline OCTETSTRING& spare()
    {return field_spare;}
  inline const OCTETSTRING& spare() const
    {return field_spare;}
  inline PCUIF__MsgUnion& u()
    {return field_u;}
  inline const PCUIF__MsgUnion& u() const
    {return field_u;}
  inline int size_of() const
    {return 4;}
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE, const RAW_Force_Omit* force_omit = NULL);
};

class PCUIF__Message_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PCUIF__Message_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PCUIF__Message& other_value);
void copy_template(const PCUIF__Message_template& other_value);

public:
PCUIF__Message_template();
PCUIF__Message_template(template_sel other_value);
PCUIF__Message_template(const PCUIF__Message& other_value);
PCUIF__Message_template(const OPTIONAL<PCUIF__Message>& other_value);
PCUIF__Message_template(const PCUIF__Message_template& other_value);
~PCUIF__Message_template();
PCUIF__Message_template& operator=(template_sel other_value);
PCUIF__Message_template& operator=(const PCUIF__Message& other_value);
PCUIF__Message_template& operator=(const OPTIONAL<PCUIF__Message>& other_value);
PCUIF__Message_template& operator=(const PCUIF__Message_template& other_value);
boolean match(const PCUIF__Message& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PCUIF__Message valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PCUIF__Message_template& list_item(unsigned int list_index) const;
PCUIF__MsgType_template& msg__type();
const PCUIF__MsgType_template& msg__type() const;
INTEGER_template& bts__nr();
const INTEGER_template& bts__nr() const;
OCTETSTRING_template& spare();
const OCTETSTRING_template& spare() const;
PCUIF__MsgUnion_template& u();
const PCUIF__MsgUnion_template& u() const;
int size_of() const;
void log() const;
void log_match(const PCUIF__Message& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Function prototypes */

extern void PCUIF__MsgType_encoder(const PCUIF__MsgType& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgType_decoder(OCTETSTRING& input_stream, PCUIF__MsgType& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Sapi_encoder(const PCUIF__Sapi& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Sapi_decoder(OCTETSTRING& input_stream, PCUIF__Sapi& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_bts__active_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_bts__active_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_sysmo__direct__dsp_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_sysmo__direct__dsp_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_spare_encoder(const BITSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_spare_decoder(OCTETSTRING& input_stream, BITSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_cs1_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_cs1_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_cs2_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_cs2_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_cs3_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_cs3_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_cs4_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_cs4_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_mcs1_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_mcs1_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_mcs2_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_mcs2_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_mcs3_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_mcs3_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_mcs4_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_mcs4_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_mcs5_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_mcs5_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_mcs6_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_mcs6_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_mcs7_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_mcs7_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_mcs8_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_mcs8_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_mcs9_encoder(const BOOLEAN& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_mcs9_decoder(OCTETSTRING& input_stream, BOOLEAN& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_spare2_encoder(const BITSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_spare2_decoder(OCTETSTRING& input_stream, BITSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Flags_encoder(const PCUIF__Flags& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Flags_decoder(OCTETSTRING& input_stream, PCUIF__Flags& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__TextType_encoder(const PCUIF__TextType& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__TextType_decoder(OCTETSTRING& input_stream, PCUIF__TextType& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Text_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Text_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__txt__ind_txt__type_encoder(const PCUIF__TextType& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__txt__ind_txt__type_decoder(OCTETSTRING& input_stream, PCUIF__TextType& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__txt__ind_text_encoder(const CHARSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__txt__ind_text_decoder(OCTETSTRING& input_stream, CHARSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__txt__ind_encoder(const PCUIF__txt__ind& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__txt__ind_decoder(OCTETSTRING& input_stream, PCUIF__txt__ind& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void OCT162_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER OCT162_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_sapi_encoder(const PCUIF__Sapi& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_sapi_decoder(OCTETSTRING& input_stream, PCUIF__Sapi& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_len_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_len_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_data_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_data_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_fn_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_fn_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_arfcn_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_arfcn_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_trx__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_trx__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_ts__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_ts__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_block__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_block__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_rssi_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_rssi_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_ber10k_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_ber10k_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_ta__offs__qbits_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_ta__offs__qbits_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_lqual__cb_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_lqual__cb_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data_encoder(const PCUIF__data& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data_decoder(OCTETSTRING& input_stream, PCUIF__data& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_sapi_encoder(const PCUIF__Sapi& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_sapi_decoder(OCTETSTRING& input_stream, PCUIF__Sapi& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_tlli_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_tlli_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_fn_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_fn_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_arfcn_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_arfcn_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_trx__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_trx__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_ts__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_ts__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_block__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_block__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_rssi_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_rssi_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_ber10k_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_ber10k_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_ta__offs__qbits_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_ta__offs__qbits_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_lqual__cb_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_lqual__cb_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__data__cnf__dt_encoder(const PCUIF__data__cnf__dt& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__data__cnf__dt_decoder(OCTETSTRING& input_stream, PCUIF__data__cnf__dt& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rts__req_sapi_encoder(const PCUIF__Sapi& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rts__req_sapi_decoder(OCTETSTRING& input_stream, PCUIF__Sapi& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rts__req_spare_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rts__req_spare_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rts__req_fn_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rts__req_fn_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rts__req_arfcn_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rts__req_arfcn_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rts__req_trx__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rts__req_trx__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rts__req_ts__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rts__req_ts__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rts__req_block__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rts__req_block__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rts__req_encoder(const PCUIF__rts__req& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rts__req_decoder(OCTETSTRING& input_stream, PCUIF__rts__req& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__BurstType_encoder(const PCUIF__BurstType& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__BurstType_decoder(OCTETSTRING& input_stream, PCUIF__BurstType& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rach__ind_sapi_encoder(const PCUIF__Sapi& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rach__ind_sapi_decoder(OCTETSTRING& input_stream, PCUIF__Sapi& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rach__ind_ra_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rach__ind_ra_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rach__ind_qta_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rach__ind_qta_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rach__ind_fn_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rach__ind_fn_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rach__ind_arfcn_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rach__ind_arfcn_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rach__ind_is__11bit_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rach__ind_is__11bit_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rach__ind_burst__type_encoder(const PCUIF__BurstType& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rach__ind_burst__type_decoder(OCTETSTRING& input_stream, PCUIF__BurstType& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__rach__ind_encoder(const PCUIF__rach__ind& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__rach__ind_decoder(OCTETSTRING& input_stream, PCUIF__rach__ind& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__InfoTrx_arfcn_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__InfoTrx_arfcn_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__InfoTrx_pdch__mask_encoder(const BITSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__InfoTrx_pdch__mask_decoder(OCTETSTRING& input_stream, BITSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__InfoTrx_spare_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__InfoTrx_spare_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__InfoTrx_tsc_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__InfoTrx_tsc_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__InfoTrx_hLayer1_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__InfoTrx_hLayer1_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__InfoTrx_encoder(const PCUIF__InfoTrx& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__InfoTrx_decoder(OCTETSTRING& input_stream, PCUIF__InfoTrx& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern boolean operator==(null_type null_value, const PCUIF__InfoTrxs& other_value);
inline boolean operator!=(null_type null_value, const PCUIF__InfoTrxs& other_value) { return !(null_value == other_value); }
extern void PCUIF__InfoTrxs_0_encoder(const PCUIF__InfoTrx& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__InfoTrxs_0_decoder(OCTETSTRING& input_stream, PCUIF__InfoTrx& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__InfoTrxs_encoder(const PCUIF__InfoTrxs& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__InfoTrxs_decoder(OCTETSTRING& input_stream, PCUIF__InfoTrxs& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_version_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_version_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_flags_encoder(const PCUIF__Flags& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_flags_decoder(OCTETSTRING& input_stream, PCUIF__Flags& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_trx_encoder(const PCUIF__InfoTrxs& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_trx_decoder(OCTETSTRING& input_stream, PCUIF__InfoTrxs& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_bsic_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_bsic_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_mcc_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_mcc_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_mnc_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_mnc_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_mnc__3__digits_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_mnc__3__digits_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_lac_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_lac_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_rac_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_rac_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_nsei_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_nsei_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_nse__timer_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_nse__timer_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_nse__timer_encoder(const PCUIF__info__ind_nse__timer& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_nse__timer_decoder(OCTETSTRING& input_stream, PCUIF__info__ind_nse__timer& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_cell__timer_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_cell__timer_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_cell__timer_encoder(const PCUIF__info__ind_cell__timer& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_cell__timer_decoder(OCTETSTRING& input_stream, PCUIF__info__ind_cell__timer& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_cell__id_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_cell__id_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_repeat__time_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_repeat__time_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_repeat__count_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_repeat__count_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_bvci_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_bvci_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_t3142_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_t3142_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_t3169_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_t3169_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_t3191_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_t3191_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_t3193__10ms_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_t3193__10ms_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_t3195_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_t3195_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_t3101_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_t3101_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_t3103_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_t3103_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_t3105_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_t3105_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_cv__countdown_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_cv__countdown_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_dl__tbf__ext_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_dl__tbf__ext_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_ul__tbf__ext_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_ul__tbf__ext_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_initial__cs_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_initial__cs_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_initial__mcs_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_initial__mcs_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_nsvci_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_nsvci_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_nsvci_encoder(const PCUIF__info__ind_nsvci& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_nsvci_decoder(OCTETSTRING& input_stream, PCUIF__info__ind_nsvci& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_local__pprt_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_local__pprt_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_local__pprt_encoder(const PCUIF__info__ind_local__pprt& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_local__pprt_decoder(OCTETSTRING& input_stream, PCUIF__info__ind_local__pprt& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_remote__port_0_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_remote__port_0_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_remote__port_encoder(const PCUIF__info__ind_remote__port& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_remote__port_decoder(OCTETSTRING& input_stream, PCUIF__info__ind_remote__port& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_remote__ip_0_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_remote__ip_0_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_remote__ip_encoder(const PCUIF__info__ind_remote__ip& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_remote__ip_decoder(OCTETSTRING& input_stream, PCUIF__info__ind_remote__ip& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__info__ind_encoder(const PCUIF__info__ind& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__info__ind_decoder(OCTETSTRING& input_stream, PCUIF__info__ind& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__act__req_is__activate_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__act__req_is__activate_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__act__req_trx__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__act__req_trx__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__act__req_ts__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__act__req_ts__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__act__req_spare_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__act__req_spare_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__act__req_encoder(const PCUIF__act__req& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__act__req_decoder(OCTETSTRING& input_stream, PCUIF__act__req& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__time__ind_fn_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__time__ind_fn_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__time__ind_encoder(const PCUIF__time__ind& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__time__ind_decoder(OCTETSTRING& input_stream, PCUIF__time__ind& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__pag__req_sapi_encoder(const PCUIF__Sapi& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__pag__req_sapi_decoder(OCTETSTRING& input_stream, PCUIF__Sapi& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__pag__req_chan__needed_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__pag__req_chan__needed_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__pag__req_identity__lv_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__pag__req_identity__lv_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__pag__req_encoder(const PCUIF__pag__req& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__pag__req_decoder(OCTETSTRING& input_stream, PCUIF__pag__req& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__susp__req_tlli_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__susp__req_tlli_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__susp__req_ra__id_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__susp__req_ra__id_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__susp__req_cause_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__susp__req_cause_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__susp__req_encoder(const PCUIF__susp__req& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__susp__req_decoder(OCTETSTRING& input_stream, PCUIF__susp__req& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_data__req_encoder(const PCUIF__data& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_data__req_decoder(OCTETSTRING& input_stream, PCUIF__data& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_data__cnf_encoder(const PCUIF__data& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_data__cnf_decoder(OCTETSTRING& input_stream, PCUIF__data& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_data__cnf__dt_encoder(const PCUIF__data__cnf__dt& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_data__cnf__dt_decoder(OCTETSTRING& input_stream, PCUIF__data__cnf__dt& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_data__ind_encoder(const PCUIF__data& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_data__ind_decoder(OCTETSTRING& input_stream, PCUIF__data& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_susp__req_encoder(const PCUIF__susp__req& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_susp__req_decoder(OCTETSTRING& input_stream, PCUIF__susp__req& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_rts__req_encoder(const PCUIF__rts__req& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_rts__req_decoder(OCTETSTRING& input_stream, PCUIF__rts__req& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_rach__ind_encoder(const PCUIF__rach__ind& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_rach__ind_decoder(OCTETSTRING& input_stream, PCUIF__rach__ind& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_txt__ind_encoder(const PCUIF__txt__ind& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_txt__ind_decoder(OCTETSTRING& input_stream, PCUIF__txt__ind& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_info__ind_encoder(const PCUIF__info__ind& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_info__ind_decoder(OCTETSTRING& input_stream, PCUIF__info__ind& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_act__req_encoder(const PCUIF__act__req& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_act__req_decoder(OCTETSTRING& input_stream, PCUIF__act__req& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_time__ind_encoder(const PCUIF__time__ind& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_time__ind_decoder(OCTETSTRING& input_stream, PCUIF__time__ind& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_pag__req_encoder(const PCUIF__pag__req& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_pag__req_decoder(OCTETSTRING& input_stream, PCUIF__pag__req& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__MsgUnion_encoder(const PCUIF__MsgUnion& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__MsgUnion_decoder(OCTETSTRING& input_stream, PCUIF__MsgUnion& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Message_msg__type_encoder(const PCUIF__MsgType& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Message_msg__type_decoder(OCTETSTRING& input_stream, PCUIF__MsgType& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Message_bts__nr_encoder(const INTEGER& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Message_bts__nr_decoder(OCTETSTRING& input_stream, INTEGER& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Message_spare_encoder(const OCTETSTRING& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Message_spare_decoder(OCTETSTRING& input_stream, OCTETSTRING& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Message_u_encoder(const PCUIF__MsgUnion& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Message_u_decoder(OCTETSTRING& input_stream, PCUIF__MsgUnion& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern void PCUIF__Message_encoder(const PCUIF__Message& input_value, OCTETSTRING& output_stream, const UNIVERSAL_CHARSTRING& coding_name);
extern INTEGER PCUIF__Message_decoder(OCTETSTRING& input_stream, PCUIF__Message& output_value, const UNIVERSAL_CHARSTRING& coding_name);
extern OCTETSTRING enc__PCUIF__Message(const PCUIF__Message& pdu);
extern PCUIF__Message dec__PCUIF__Message(const OCTETSTRING& stream);
extern PCUIF__Message_template ts__PCUIF__RTS__REQ(const INTEGER_template& bts__nr, const INTEGER_template& trx__nr, const INTEGER_template& ts__nr, const PCUIF__Sapi_template& sapi, const INTEGER_template& fn, const INTEGER_template& arfcn, const INTEGER_template& block__nr);
extern PCUIF__Message_template tr__PCUIF__RTS__REQ(const INTEGER_template& bts__nr, const INTEGER_template& trx__nr, const INTEGER_template& ts__nr, const PCUIF__Sapi_template& sapi, const INTEGER_template& fn, const INTEGER_template& block__nr);
extern PCUIF__Message_template ts__PCUIF__TXT__IND(const INTEGER& bts__nr, const PCUIF__TextType& tt, const CHARSTRING& text);
extern PCUIF__Message_template tr__PCUIF__TXT__IND(const INTEGER_template& bts__nr, const PCUIF__TextType_template& tt, const CHARSTRING_template& text);
extern PCUIF__Message_template ts__PCUIF__ACT__REQ(const INTEGER& bts__nr, const INTEGER& trx__nr, const INTEGER& ts__nr);
extern PCUIF__Message_template tr__PCUIF__ACT__REQ(const INTEGER_template& bts__nr, const INTEGER_template& trx__nr, const INTEGER_template& ts__nr);
extern PCUIF__Message_template ts__PCUIF__DEACT__REQ(const INTEGER& bts__nr, const INTEGER& trx__nr, const INTEGER& ts__nr);
extern PCUIF__Message_template tr__PCUIF__DEACT__REQ(const INTEGER_template& bts__nr, const INTEGER_template& trx__nr, const INTEGER_template& ts__nr);
extern PCUIF__Message_template ts__PCUIF__DATA__IND(const INTEGER_template& bts__nr, const INTEGER_template& trx__nr, const INTEGER_template& ts__nr, const INTEGER_template& block__nr, const PCUIF__Sapi_template& sapi, const OCTETSTRING_template& data, const INTEGER_template& fn, const INTEGER_template& arfcn, const INTEGER_template& rssi, const INTEGER_template& ber10k, const INTEGER_template& ta__offs__qbits, const INTEGER_template& lqual__cb);
extern PCUIF__Message_template tr__PCUIF__DATA__IND(const INTEGER_template& bts__nr, const INTEGER_template& trx__nr, const INTEGER_template& ts__nr, const INTEGER_template& block__nr, const PCUIF__Sapi_template& sapi, const OCTETSTRING_template& data);
extern PCUIF__Message_template ts__PCUIF__DATA__REQ(const INTEGER& bts__nr, const INTEGER& trx__nr, const INTEGER& ts__nr, const INTEGER& block__nr, const INTEGER& fn, const PCUIF__Sapi& sapi, const OCTETSTRING& data);
extern PCUIF__Message_template tr__PCUIF__DATA__REQ(const INTEGER_template& bts__nr, const INTEGER_template& trx__nr, const INTEGER_template& ts__nr, const INTEGER_template& block__nr, const INTEGER_template& fn, const PCUIF__Sapi_template& sapi, const OCTETSTRING_template& data);
extern PCUIF__Message_template ts__PCUIF__DATA__CNF(const INTEGER_template& bts__nr, const INTEGER_template& trx__nr, const INTEGER_template& ts__nr, const INTEGER_template& block__nr, const INTEGER_template& fn, const INTEGER_template& arfcn, const PCUIF__Sapi_template& sapi, const OCTETSTRING_template& data);
extern PCUIF__Message_template tr__PCUIF__DATA__CNF(const INTEGER_template& bts__nr, const INTEGER_template& trx__nr, const INTEGER_template& ts__nr, const PCUIF__Sapi_template& sapi, const OCTETSTRING_template& data);
extern PCUIF__Message_template ts__PCUIF__RACH__IND(const INTEGER_template& bts__nr, const INTEGER_template& ra, const INTEGER_template& is__11bit, const PCUIF__BurstType_template& burst__type, const INTEGER_template& fn, const INTEGER_template& arfcn, const INTEGER_template& qta);
extern PCUIF__Message_template tr__PCUIF__RACH__IND(const INTEGER_template& bts__nr, const INTEGER_template& ra, const INTEGER_template& is__11bit, const PCUIF__BurstType_template& burst__type, const INTEGER_template& fn);
extern PCUIF__Message_template ts__PCUIF__PAG__REQ(const INTEGER_template& bts__nr, const OCTETSTRING_template& id__lv, const INTEGER_template& chan__needed, const PCUIF__Sapi_template& sapi);
extern PCUIF__Message_template tr__PCUIF__PAG__REQ(const INTEGER_template& bts__nr, const OCTETSTRING_template& id__lv, const INTEGER_template& chan__needed, const PCUIF__Sapi_template& );
extern PCUIF__InfoTrx_template ts__PCUIF__InfoTrx(const INTEGER_template& arfcn, const BITSTRING_template& pdch__mask, const OCTETSTRING& tsc);
extern PCUIF__Message_template ts__PCUIF__INFO__IND(const INTEGER_template& bts__nr, const INTEGER_template& nsei, const INTEGER_template& nsvci, const INTEGER_template& bvci, const INTEGER_template& local__port, const INTEGER_template& remote__port, const OCTETSTRING_template& remote__ip, const PCUIF__Flags_template& flags, const INTEGER_template& mcc, const INTEGER_template& mnc, const INTEGER_template& lac, const INTEGER_template& rac, const INTEGER_template& cell__id, const INTEGER_template& bsic, const PCUIF__InfoTrxs_template& trx, const INTEGER_template& version);
extern PCUIF__Message_template tr__PCUIF__INFO__IND(const INTEGER_template& bts__nr, const PCUIF__Flags_template& flags, const INTEGER_template& version);
extern PCUIF__Message_template ts__PCUIF__TIME__IND(const INTEGER_template& bts__nr, const INTEGER_template& fn);
extern PCUIF__Message_template tr__PCUIF__TIME__IND(const INTEGER_template& bts__nr, const INTEGER_template& fn);
extern PCUIF__Message_template ts__PCUIF__SUSP__REQ(const INTEGER_template& bts__nr, const OCTETSTRING_template& tlli, const OCTETSTRING_template& ra__id, const INTEGER_template& cause);
extern PCUIF__Message_template tr__PCUIF__SUSP__REQ(const INTEGER_template& bts__nr, const OCTETSTRING_template& tlli, const OCTETSTRING_template& ra__id, const INTEGER_template& cause);

/* Global variable declarations */

extern const CHARSTRING& PCU__SOCK__DEFAULT;
extern const INTEGER& PCU__IF__VERSION;
extern const TTCN_RAWdescriptor_t PCUIF__MsgType_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgType_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgType_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Sapi_raw_;
extern const TTCN_Typedescriptor_t PCUIF__Sapi_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Sapi_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_bts__active_raw_;
extern const XERdescriptor_t PCUIF__Flags_bts__active_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_bts__active_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_bts__active_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_bts__active_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_sysmo__direct__dsp_raw_;
extern const XERdescriptor_t PCUIF__Flags_sysmo__direct__dsp_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_sysmo__direct__dsp_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_sysmo__direct__dsp_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_sysmo__direct__dsp_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_spare_raw_;
extern const XERdescriptor_t PCUIF__Flags_spare_xer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_spare_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_spare_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_cs1_raw_;
extern const XERdescriptor_t PCUIF__Flags_cs1_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_cs1_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_cs1_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_cs1_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_cs2_raw_;
extern const XERdescriptor_t PCUIF__Flags_cs2_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_cs2_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_cs2_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_cs2_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_cs3_raw_;
extern const XERdescriptor_t PCUIF__Flags_cs3_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_cs3_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_cs3_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_cs3_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_cs4_raw_;
extern const XERdescriptor_t PCUIF__Flags_cs4_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_cs4_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_cs4_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_cs4_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_mcs1_raw_;
extern const XERdescriptor_t PCUIF__Flags_mcs1_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_mcs1_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_mcs1_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_mcs1_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_mcs2_raw_;
extern const XERdescriptor_t PCUIF__Flags_mcs2_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_mcs2_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_mcs2_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_mcs2_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_mcs3_raw_;
extern const XERdescriptor_t PCUIF__Flags_mcs3_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_mcs3_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_mcs3_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_mcs3_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_mcs4_raw_;
extern const XERdescriptor_t PCUIF__Flags_mcs4_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_mcs4_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_mcs4_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_mcs4_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_mcs5_raw_;
extern const XERdescriptor_t PCUIF__Flags_mcs5_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_mcs5_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_mcs5_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_mcs5_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_mcs6_raw_;
extern const XERdescriptor_t PCUIF__Flags_mcs6_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_mcs6_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_mcs6_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_mcs6_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_mcs7_raw_;
extern const XERdescriptor_t PCUIF__Flags_mcs7_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_mcs7_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_mcs7_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_mcs7_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_mcs8_raw_;
extern const XERdescriptor_t PCUIF__Flags_mcs8_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_mcs8_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_mcs8_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_mcs8_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_mcs9_raw_;
extern const XERdescriptor_t PCUIF__Flags_mcs9_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Flags_mcs9_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_mcs9_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_mcs9_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_spare2_raw_;
extern const XERdescriptor_t PCUIF__Flags_spare2_xer_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_spare2_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_spare2_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Flags_raw_;
extern const TTCN_Typedescriptor_t PCUIF__Flags_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Flags_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__TextType_raw_;
extern const TTCN_Typedescriptor_t PCUIF__TextType_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__TextType_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Text_raw_;
extern const XERdescriptor_t PCUIF__Text_xer_;
extern const TTCN_Typedescriptor_t PCUIF__Text_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Text_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__txt__ind_txt__type_raw_;
extern const TTCN_Typedescriptor_t PCUIF__txt__ind_txt__type_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__txt__ind_txt__type_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__txt__ind_text_raw_;
extern const XERdescriptor_t PCUIF__txt__ind_text_xer_;
extern const TTCN_Typedescriptor_t PCUIF__txt__ind_text_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__txt__ind_text_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__txt__ind_raw_;
extern const TTCN_Typedescriptor_t PCUIF__txt__ind_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__txt__ind_default_coding;
extern const TTCN_RAWdescriptor_t OCT162_raw_;
extern const XERdescriptor_t OCT162_xer_;
extern const TTCN_OERdescriptor_t OCT162_oer_;
extern const TTCN_Typedescriptor_t OCT162_descr_;
extern UNIVERSAL_CHARSTRING OCT162_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_sapi_raw_;
extern const TTCN_Typedescriptor_t PCUIF__data_sapi_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_sapi_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_len_raw_;
extern const XERdescriptor_t PCUIF__data_len_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data_len_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data_len_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_len_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_data_raw_;
extern const XERdescriptor_t PCUIF__data_data_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data_data_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data_data_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_data_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_fn_raw_;
extern const XERdescriptor_t PCUIF__data_fn_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data_fn_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data_fn_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_fn_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_arfcn_raw_;
extern const XERdescriptor_t PCUIF__data_arfcn_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data_arfcn_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data_arfcn_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_arfcn_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_trx__nr_raw_;
extern const XERdescriptor_t PCUIF__data_trx__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data_trx__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data_trx__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_trx__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_ts__nr_raw_;
extern const XERdescriptor_t PCUIF__data_ts__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data_ts__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data_ts__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_ts__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_block__nr_raw_;
extern const XERdescriptor_t PCUIF__data_block__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data_block__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data_block__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_block__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_rssi_raw_;
extern const XERdescriptor_t PCUIF__data_rssi_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data_rssi_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data_rssi_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_rssi_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_ber10k_raw_;
extern const XERdescriptor_t PCUIF__data_ber10k_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data_ber10k_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data_ber10k_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_ber10k_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_ta__offs__qbits_raw_;
extern const XERdescriptor_t PCUIF__data_ta__offs__qbits_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data_ta__offs__qbits_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data_ta__offs__qbits_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_ta__offs__qbits_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_lqual__cb_raw_;
extern const XERdescriptor_t PCUIF__data_lqual__cb_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data_lqual__cb_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data_lqual__cb_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_lqual__cb_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data_raw_;
extern const TTCN_Typedescriptor_t PCUIF__data_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_sapi_raw_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_sapi_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_sapi_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_tlli_raw_;
extern const XERdescriptor_t PCUIF__data__cnf__dt_tlli_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data__cnf__dt_tlli_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_tlli_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_tlli_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_fn_raw_;
extern const XERdescriptor_t PCUIF__data__cnf__dt_fn_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data__cnf__dt_fn_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_fn_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_fn_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_arfcn_raw_;
extern const XERdescriptor_t PCUIF__data__cnf__dt_arfcn_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data__cnf__dt_arfcn_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_arfcn_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_arfcn_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_trx__nr_raw_;
extern const XERdescriptor_t PCUIF__data__cnf__dt_trx__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data__cnf__dt_trx__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_trx__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_trx__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_ts__nr_raw_;
extern const XERdescriptor_t PCUIF__data__cnf__dt_ts__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data__cnf__dt_ts__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_ts__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_ts__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_block__nr_raw_;
extern const XERdescriptor_t PCUIF__data__cnf__dt_block__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data__cnf__dt_block__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_block__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_block__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_rssi_raw_;
extern const XERdescriptor_t PCUIF__data__cnf__dt_rssi_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data__cnf__dt_rssi_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_rssi_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_rssi_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_ber10k_raw_;
extern const XERdescriptor_t PCUIF__data__cnf__dt_ber10k_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data__cnf__dt_ber10k_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_ber10k_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_ber10k_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_ta__offs__qbits_raw_;
extern const XERdescriptor_t PCUIF__data__cnf__dt_ta__offs__qbits_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data__cnf__dt_ta__offs__qbits_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_ta__offs__qbits_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_ta__offs__qbits_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_lqual__cb_raw_;
extern const XERdescriptor_t PCUIF__data__cnf__dt_lqual__cb_xer_;
extern const TTCN_OERdescriptor_t PCUIF__data__cnf__dt_lqual__cb_oer_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_lqual__cb_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_lqual__cb_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__data__cnf__dt_raw_;
extern const TTCN_Typedescriptor_t PCUIF__data__cnf__dt_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__data__cnf__dt_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rts__req_sapi_raw_;
extern const TTCN_Typedescriptor_t PCUIF__rts__req_sapi_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rts__req_sapi_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rts__req_spare_raw_;
extern const XERdescriptor_t PCUIF__rts__req_spare_xer_;
extern const TTCN_OERdescriptor_t PCUIF__rts__req_spare_oer_;
extern const TTCN_Typedescriptor_t PCUIF__rts__req_spare_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rts__req_spare_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rts__req_fn_raw_;
extern const XERdescriptor_t PCUIF__rts__req_fn_xer_;
extern const TTCN_OERdescriptor_t PCUIF__rts__req_fn_oer_;
extern const TTCN_Typedescriptor_t PCUIF__rts__req_fn_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rts__req_fn_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rts__req_arfcn_raw_;
extern const XERdescriptor_t PCUIF__rts__req_arfcn_xer_;
extern const TTCN_OERdescriptor_t PCUIF__rts__req_arfcn_oer_;
extern const TTCN_Typedescriptor_t PCUIF__rts__req_arfcn_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rts__req_arfcn_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rts__req_trx__nr_raw_;
extern const XERdescriptor_t PCUIF__rts__req_trx__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__rts__req_trx__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__rts__req_trx__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rts__req_trx__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rts__req_ts__nr_raw_;
extern const XERdescriptor_t PCUIF__rts__req_ts__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__rts__req_ts__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__rts__req_ts__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rts__req_ts__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rts__req_block__nr_raw_;
extern const XERdescriptor_t PCUIF__rts__req_block__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__rts__req_block__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__rts__req_block__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rts__req_block__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rts__req_raw_;
extern const TTCN_Typedescriptor_t PCUIF__rts__req_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rts__req_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__BurstType_raw_;
extern const TTCN_Typedescriptor_t PCUIF__BurstType_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__BurstType_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rach__ind_sapi_raw_;
extern const TTCN_Typedescriptor_t PCUIF__rach__ind_sapi_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rach__ind_sapi_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rach__ind_ra_raw_;
extern const XERdescriptor_t PCUIF__rach__ind_ra_xer_;
extern const TTCN_OERdescriptor_t PCUIF__rach__ind_ra_oer_;
extern const TTCN_Typedescriptor_t PCUIF__rach__ind_ra_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rach__ind_ra_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rach__ind_qta_raw_;
extern const XERdescriptor_t PCUIF__rach__ind_qta_xer_;
extern const TTCN_OERdescriptor_t PCUIF__rach__ind_qta_oer_;
extern const TTCN_Typedescriptor_t PCUIF__rach__ind_qta_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rach__ind_qta_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rach__ind_fn_raw_;
extern const XERdescriptor_t PCUIF__rach__ind_fn_xer_;
extern const TTCN_OERdescriptor_t PCUIF__rach__ind_fn_oer_;
extern const TTCN_Typedescriptor_t PCUIF__rach__ind_fn_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rach__ind_fn_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rach__ind_arfcn_raw_;
extern const XERdescriptor_t PCUIF__rach__ind_arfcn_xer_;
extern const TTCN_OERdescriptor_t PCUIF__rach__ind_arfcn_oer_;
extern const TTCN_Typedescriptor_t PCUIF__rach__ind_arfcn_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rach__ind_arfcn_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rach__ind_is__11bit_raw_;
extern const XERdescriptor_t PCUIF__rach__ind_is__11bit_xer_;
extern const TTCN_OERdescriptor_t PCUIF__rach__ind_is__11bit_oer_;
extern const TTCN_Typedescriptor_t PCUIF__rach__ind_is__11bit_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rach__ind_is__11bit_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rach__ind_burst__type_raw_;
extern const TTCN_Typedescriptor_t PCUIF__rach__ind_burst__type_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rach__ind_burst__type_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__rach__ind_raw_;
extern const TTCN_Typedescriptor_t PCUIF__rach__ind_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__rach__ind_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__InfoTrx_arfcn_raw_;
extern const XERdescriptor_t PCUIF__InfoTrx_arfcn_xer_;
extern const TTCN_OERdescriptor_t PCUIF__InfoTrx_arfcn_oer_;
extern const TTCN_Typedescriptor_t PCUIF__InfoTrx_arfcn_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__InfoTrx_arfcn_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__InfoTrx_pdch__mask_raw_;
extern const XERdescriptor_t PCUIF__InfoTrx_pdch__mask_xer_;
extern const TTCN_Typedescriptor_t PCUIF__InfoTrx_pdch__mask_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__InfoTrx_pdch__mask_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__InfoTrx_spare_raw_;
extern const XERdescriptor_t PCUIF__InfoTrx_spare_xer_;
extern const TTCN_OERdescriptor_t PCUIF__InfoTrx_spare_oer_;
extern const TTCN_Typedescriptor_t PCUIF__InfoTrx_spare_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__InfoTrx_spare_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__InfoTrx_tsc_raw_;
extern const XERdescriptor_t PCUIF__InfoTrx_tsc_xer_;
extern const TTCN_OERdescriptor_t PCUIF__InfoTrx_tsc_oer_;
extern const TTCN_Typedescriptor_t PCUIF__InfoTrx_tsc_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__InfoTrx_tsc_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__InfoTrx_hLayer1_raw_;
extern const XERdescriptor_t PCUIF__InfoTrx_hLayer1_xer_;
extern const TTCN_OERdescriptor_t PCUIF__InfoTrx_hLayer1_oer_;
extern const TTCN_Typedescriptor_t PCUIF__InfoTrx_hLayer1_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__InfoTrx_hLayer1_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__InfoTrx_raw_;
extern const TTCN_Typedescriptor_t PCUIF__InfoTrx_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__InfoTrx_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__InfoTrxs_raw_;
extern const TTCN_Typedescriptor_t PCUIF__InfoTrxs_descr_;
extern const TTCN_RAWdescriptor_t PCUIF__InfoTrxs_0_raw_;
extern const TTCN_Typedescriptor_t PCUIF__InfoTrxs_0_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__InfoTrxs_0_default_coding;
extern UNIVERSAL_CHARSTRING PCUIF__InfoTrxs_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_version_raw_;
extern const XERdescriptor_t PCUIF__info__ind_version_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_version_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_version_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_version_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_flags_raw_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_flags_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_flags_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_trx_raw_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_trx_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_trx_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_bsic_raw_;
extern const XERdescriptor_t PCUIF__info__ind_bsic_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_bsic_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_bsic_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_bsic_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_mcc_raw_;
extern const XERdescriptor_t PCUIF__info__ind_mcc_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_mcc_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_mcc_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_mcc_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_mnc_raw_;
extern const XERdescriptor_t PCUIF__info__ind_mnc_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_mnc_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_mnc_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_mnc_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_mnc__3__digits_raw_;
extern const XERdescriptor_t PCUIF__info__ind_mnc__3__digits_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_mnc__3__digits_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_mnc__3__digits_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_mnc__3__digits_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_lac_raw_;
extern const XERdescriptor_t PCUIF__info__ind_lac_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_lac_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_lac_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_lac_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_rac_raw_;
extern const XERdescriptor_t PCUIF__info__ind_rac_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_rac_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_rac_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_rac_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_nsei_raw_;
extern const XERdescriptor_t PCUIF__info__ind_nsei_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_nsei_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_nsei_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_nsei_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_nse__timer_raw_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_nse__timer_descr_;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_nse__timer_0_raw_;
extern const XERdescriptor_t PCUIF__info__ind_nse__timer_0_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_nse__timer_0_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_nse__timer_0_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_nse__timer_0_default_coding;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_nse__timer_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_cell__timer_raw_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_cell__timer_descr_;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_cell__timer_0_raw_;
extern const XERdescriptor_t PCUIF__info__ind_cell__timer_0_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_cell__timer_0_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_cell__timer_0_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_cell__timer_0_default_coding;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_cell__timer_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_cell__id_raw_;
extern const XERdescriptor_t PCUIF__info__ind_cell__id_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_cell__id_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_cell__id_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_cell__id_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_repeat__time_raw_;
extern const XERdescriptor_t PCUIF__info__ind_repeat__time_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_repeat__time_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_repeat__time_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_repeat__time_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_repeat__count_raw_;
extern const XERdescriptor_t PCUIF__info__ind_repeat__count_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_repeat__count_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_repeat__count_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_repeat__count_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_bvci_raw_;
extern const XERdescriptor_t PCUIF__info__ind_bvci_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_bvci_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_bvci_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_bvci_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_t3142_raw_;
extern const XERdescriptor_t PCUIF__info__ind_t3142_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_t3142_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_t3142_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_t3142_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_t3169_raw_;
extern const XERdescriptor_t PCUIF__info__ind_t3169_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_t3169_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_t3169_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_t3169_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_t3191_raw_;
extern const XERdescriptor_t PCUIF__info__ind_t3191_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_t3191_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_t3191_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_t3191_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_t3193__10ms_raw_;
extern const XERdescriptor_t PCUIF__info__ind_t3193__10ms_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_t3193__10ms_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_t3193__10ms_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_t3193__10ms_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_t3195_raw_;
extern const XERdescriptor_t PCUIF__info__ind_t3195_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_t3195_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_t3195_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_t3195_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_t3101_raw_;
extern const XERdescriptor_t PCUIF__info__ind_t3101_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_t3101_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_t3101_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_t3101_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_t3103_raw_;
extern const XERdescriptor_t PCUIF__info__ind_t3103_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_t3103_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_t3103_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_t3103_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_t3105_raw_;
extern const XERdescriptor_t PCUIF__info__ind_t3105_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_t3105_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_t3105_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_t3105_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_cv__countdown_raw_;
extern const XERdescriptor_t PCUIF__info__ind_cv__countdown_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_cv__countdown_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_cv__countdown_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_cv__countdown_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_dl__tbf__ext_raw_;
extern const XERdescriptor_t PCUIF__info__ind_dl__tbf__ext_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_dl__tbf__ext_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_dl__tbf__ext_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_dl__tbf__ext_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_ul__tbf__ext_raw_;
extern const XERdescriptor_t PCUIF__info__ind_ul__tbf__ext_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_ul__tbf__ext_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_ul__tbf__ext_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_ul__tbf__ext_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_initial__cs_raw_;
extern const XERdescriptor_t PCUIF__info__ind_initial__cs_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_initial__cs_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_initial__cs_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_initial__cs_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_initial__mcs_raw_;
extern const XERdescriptor_t PCUIF__info__ind_initial__mcs_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_initial__mcs_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_initial__mcs_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_initial__mcs_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_nsvci_raw_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_nsvci_descr_;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_nsvci_0_raw_;
extern const XERdescriptor_t PCUIF__info__ind_nsvci_0_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_nsvci_0_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_nsvci_0_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_nsvci_0_default_coding;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_nsvci_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_local__pprt_raw_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_local__pprt_descr_;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_local__pprt_0_raw_;
extern const XERdescriptor_t PCUIF__info__ind_local__pprt_0_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_local__pprt_0_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_local__pprt_0_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_local__pprt_0_default_coding;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_local__pprt_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_remote__port_raw_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_remote__port_descr_;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_remote__port_0_raw_;
extern const XERdescriptor_t PCUIF__info__ind_remote__port_0_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_remote__port_0_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_remote__port_0_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_remote__port_0_default_coding;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_remote__port_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_remote__ip_raw_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_remote__ip_descr_;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_remote__ip_0_raw_;
extern const XERdescriptor_t PCUIF__info__ind_remote__ip_0_xer_;
extern const TTCN_OERdescriptor_t PCUIF__info__ind_remote__ip_0_oer_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_remote__ip_0_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_remote__ip_0_default_coding;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_remote__ip_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__info__ind_raw_;
extern const TTCN_Typedescriptor_t PCUIF__info__ind_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__info__ind_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__act__req_is__activate_raw_;
extern const XERdescriptor_t PCUIF__act__req_is__activate_xer_;
extern const TTCN_OERdescriptor_t PCUIF__act__req_is__activate_oer_;
extern const TTCN_Typedescriptor_t PCUIF__act__req_is__activate_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__act__req_is__activate_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__act__req_trx__nr_raw_;
extern const XERdescriptor_t PCUIF__act__req_trx__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__act__req_trx__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__act__req_trx__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__act__req_trx__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__act__req_ts__nr_raw_;
extern const XERdescriptor_t PCUIF__act__req_ts__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__act__req_ts__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__act__req_ts__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__act__req_ts__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__act__req_spare_raw_;
extern const XERdescriptor_t PCUIF__act__req_spare_xer_;
extern const TTCN_OERdescriptor_t PCUIF__act__req_spare_oer_;
extern const TTCN_Typedescriptor_t PCUIF__act__req_spare_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__act__req_spare_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__act__req_raw_;
extern const TTCN_Typedescriptor_t PCUIF__act__req_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__act__req_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__time__ind_fn_raw_;
extern const XERdescriptor_t PCUIF__time__ind_fn_xer_;
extern const TTCN_OERdescriptor_t PCUIF__time__ind_fn_oer_;
extern const TTCN_Typedescriptor_t PCUIF__time__ind_fn_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__time__ind_fn_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__time__ind_raw_;
extern const TTCN_Typedescriptor_t PCUIF__time__ind_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__time__ind_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__pag__req_sapi_raw_;
extern const TTCN_Typedescriptor_t PCUIF__pag__req_sapi_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__pag__req_sapi_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__pag__req_chan__needed_raw_;
extern const XERdescriptor_t PCUIF__pag__req_chan__needed_xer_;
extern const TTCN_OERdescriptor_t PCUIF__pag__req_chan__needed_oer_;
extern const TTCN_Typedescriptor_t PCUIF__pag__req_chan__needed_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__pag__req_chan__needed_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__pag__req_identity__lv_raw_;
extern const XERdescriptor_t PCUIF__pag__req_identity__lv_xer_;
extern const TTCN_OERdescriptor_t PCUIF__pag__req_identity__lv_oer_;
extern const TTCN_Typedescriptor_t PCUIF__pag__req_identity__lv_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__pag__req_identity__lv_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__pag__req_raw_;
extern const TTCN_Typedescriptor_t PCUIF__pag__req_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__pag__req_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__susp__req_tlli_raw_;
extern const XERdescriptor_t PCUIF__susp__req_tlli_xer_;
extern const TTCN_OERdescriptor_t PCUIF__susp__req_tlli_oer_;
extern const TTCN_Typedescriptor_t PCUIF__susp__req_tlli_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__susp__req_tlli_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__susp__req_ra__id_raw_;
extern const XERdescriptor_t PCUIF__susp__req_ra__id_xer_;
extern const TTCN_OERdescriptor_t PCUIF__susp__req_ra__id_oer_;
extern const TTCN_Typedescriptor_t PCUIF__susp__req_ra__id_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__susp__req_ra__id_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__susp__req_cause_raw_;
extern const XERdescriptor_t PCUIF__susp__req_cause_xer_;
extern const TTCN_OERdescriptor_t PCUIF__susp__req_cause_oer_;
extern const TTCN_Typedescriptor_t PCUIF__susp__req_cause_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__susp__req_cause_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__susp__req_raw_;
extern const TTCN_Typedescriptor_t PCUIF__susp__req_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__susp__req_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_descr_;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_data__req_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_data__req_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_data__req_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_data__cnf_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_data__cnf_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_data__cnf_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_data__cnf__dt_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_data__cnf__dt_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_data__cnf__dt_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_data__ind_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_data__ind_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_data__ind_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_susp__req_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_susp__req_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_susp__req_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_rts__req_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_rts__req_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_rts__req_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_rach__ind_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_rach__ind_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_rach__ind_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_txt__ind_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_txt__ind_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_txt__ind_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_info__ind_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_info__ind_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_info__ind_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_act__req_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_act__req_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_act__req_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_time__ind_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_time__ind_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_time__ind_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__MsgUnion_pag__req_raw_;
extern const TTCN_Typedescriptor_t PCUIF__MsgUnion_pag__req_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_pag__req_default_coding;
extern UNIVERSAL_CHARSTRING PCUIF__MsgUnion_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Message_msg__type_raw_;
extern const TTCN_Typedescriptor_t PCUIF__Message_msg__type_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Message_msg__type_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Message_bts__nr_raw_;
extern const XERdescriptor_t PCUIF__Message_bts__nr_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Message_bts__nr_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Message_bts__nr_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Message_bts__nr_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Message_spare_raw_;
extern const XERdescriptor_t PCUIF__Message_spare_xer_;
extern const TTCN_OERdescriptor_t PCUIF__Message_spare_oer_;
extern const TTCN_Typedescriptor_t PCUIF__Message_spare_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Message_spare_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Message_u_raw_;
extern const TTCN_Typedescriptor_t PCUIF__Message_u_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Message_u_default_coding;
extern const TTCN_RAWdescriptor_t PCUIF__Message_raw_;
extern const TTCN_Typedescriptor_t PCUIF__Message_descr_;
extern UNIVERSAL_CHARSTRING PCUIF__Message_default_coding;
extern const INTEGER_template& tr__PCUIF__RTS__REQ_bts__nr_defval;
extern const INTEGER_template& tr__PCUIF__RTS__REQ_trx__nr_defval;
extern const INTEGER_template& tr__PCUIF__RTS__REQ_ts__nr_defval;
extern const PCUIF__Sapi_template& tr__PCUIF__RTS__REQ_sapi_defval;
extern const INTEGER_template& tr__PCUIF__RTS__REQ_fn_defval;
extern const INTEGER_template& tr__PCUIF__RTS__REQ_block__nr_defval;
extern const CHARSTRING_template& tr__PCUIF__TXT__IND_text_defval;
extern const INTEGER_template& ts__PCUIF__DATA__IND_rssi_defval;
extern const INTEGER_template& ts__PCUIF__DATA__IND_ber10k_defval;
extern const INTEGER_template& ts__PCUIF__DATA__IND_ta__offs__qbits_defval;
extern const INTEGER_template& ts__PCUIF__DATA__IND_lqual__cb_defval;
extern const INTEGER_template& tr__PCUIF__DATA__IND_bts__nr_defval;
extern const INTEGER_template& tr__PCUIF__DATA__IND_trx__nr_defval;
extern const INTEGER_template& tr__PCUIF__DATA__IND_ts__nr_defval;
extern const INTEGER_template& tr__PCUIF__DATA__IND_block__nr_defval;
extern const PCUIF__Sapi_template& tr__PCUIF__DATA__IND_sapi_defval;
extern const OCTETSTRING_template& tr__PCUIF__DATA__IND_data_defval;
extern const INTEGER_template& tr__PCUIF__DATA__REQ_block__nr_defval;
extern const INTEGER_template& tr__PCUIF__DATA__REQ_fn_defval;
extern const PCUIF__Sapi_template& tr__PCUIF__DATA__REQ_sapi_defval;
extern const OCTETSTRING_template& tr__PCUIF__DATA__REQ_data_defval;
extern const INTEGER_template& tr__PCUIF__DATA__CNF_bts__nr_defval;
extern const INTEGER_template& tr__PCUIF__DATA__CNF_trx__nr_defval;
extern const INTEGER_template& tr__PCUIF__DATA__CNF_ts__nr_defval;
extern const PCUIF__Sapi_template& tr__PCUIF__DATA__CNF_sapi_defval;
extern const OCTETSTRING_template& tr__PCUIF__DATA__CNF_data_defval;
extern const INTEGER_template& ts__PCUIF__RACH__IND_qta_defval;
extern const INTEGER_template& tr__PCUIF__RACH__IND_bts__nr_defval;
extern const INTEGER_template& tr__PCUIF__RACH__IND_ra_defval;
extern const INTEGER_template& tr__PCUIF__RACH__IND_is__11bit_defval;
extern const PCUIF__BurstType_template& tr__PCUIF__RACH__IND_burst__type_defval;
extern const INTEGER_template& tr__PCUIF__RACH__IND_fn_defval;
extern const INTEGER_template& tr__PCUIF__PAG__REQ_bts__nr_defval;
extern const OCTETSTRING_template& tr__PCUIF__PAG__REQ_id__lv_defval;
extern const INTEGER_template& tr__PCUIF__PAG__REQ_chan__needed_defval;
extern const PCUIF__Sapi_template& tr__PCUIF__PAG__REQ_sapi_defval;
extern const PCUIF__Flags& c__PCUIF__Flags__default;
extern const INTEGER_template& ts__PCUIF__InfoTrx_arfcn_defval;
extern const BITSTRING_template& ts__PCUIF__InfoTrx_pdch__mask_defval;
extern const OCTETSTRING& ts__PCUIF__InfoTrx_tsc_defval;
extern const PCUIF__InfoTrx_template& ts__PCUIF__InfoTrxNULL;
extern const PCUIF__InfoTrxs_template& ts__PCUIF__InfoTrxs__def;
extern const PCUIF__Flags_template& ts__PCUIF__INFO__IND_flags_defval;
extern const INTEGER_template& ts__PCUIF__INFO__IND_mcc_defval;
extern const INTEGER_template& ts__PCUIF__INFO__IND_mnc_defval;
extern const INTEGER_template& ts__PCUIF__INFO__IND_lac_defval;
extern const INTEGER_template& ts__PCUIF__INFO__IND_rac_defval;
extern const INTEGER_template& ts__PCUIF__INFO__IND_cell__id_defval;
extern const INTEGER_template& ts__PCUIF__INFO__IND_bsic_defval;
extern const PCUIF__InfoTrxs_template& ts__PCUIF__INFO__IND_trx_defval;
extern const INTEGER_template& ts__PCUIF__INFO__IND_version_defval;
extern const INTEGER_template& tr__PCUIF__INFO__IND_bts__nr_defval;
extern const PCUIF__Flags_template& tr__PCUIF__INFO__IND_flags_defval;
extern const INTEGER_template& tr__PCUIF__INFO__IND_version_defval;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
